
TFT_Display2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006154  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b04  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08007e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000484  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001830e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fee  00000000  00000000  0003838e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025267  00000000  00000000  0003da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174b3  00000000  00000000  00062cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc545  00000000  00000000  0007a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001566ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054bc  00000000  00000000  00156740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080062e8 	.word	0x080062e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	080062e8 	.word	0x080062e8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80004f4:	4819      	ldr	r0, [pc, #100]	; (800055c <SPIx_Init+0x6c>)
 80004f6:	f005 f9b0 	bl	800585a <HAL_SPI_GetState>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d12b      	bne.n	8000558 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <SPIx_Init+0x6c>)
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <SPIx_Init+0x70>)
 8000504:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <SPIx_Init+0x6c>)
 8000508:	2218      	movs	r2, #24
 800050a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <SPIx_Init+0x6c>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <SPIx_Init+0x6c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <SPIx_Init+0x6c>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <SPIx_Init+0x6c>)
 8000520:	2200      	movs	r2, #0
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <SPIx_Init+0x6c>)
 8000526:	2207      	movs	r2, #7
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <SPIx_Init+0x6c>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <SPIx_Init+0x6c>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <SPIx_Init+0x6c>)
 8000538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <SPIx_Init+0x6c>)
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <SPIx_Init+0x6c>)
 8000546:	f44f 7282 	mov.w	r2, #260	; 0x104
 800054a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <SPIx_Init+0x6c>)
 800054e:	f000 f853 	bl	80005f8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <SPIx_Init+0x6c>)
 8000554:	f004 fce1 	bl	8004f1a <HAL_SPI_Init>
  } 
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000006c 	.word	0x2000006c
 8000560:	40015000 	.word	0x40015000

08000564 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <SPIx_Read+0x38>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f107 0108 	add.w	r1, r7, #8
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <SPIx_Read+0x3c>)
 8000580:	f004 feb8 	bl	80052f4 <HAL_SPI_Receive>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800058e:	f000 f827 	bl	80005e0 <SPIx_Error>
  }
  
  return readvalue;
 8000592:	68bb      	ldr	r3, [r7, #8]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	2000006c 	.word	0x2000006c

080005a4 <SPIx_Write>:
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint16_t Value)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <SPIx_Write+0x34>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1db9      	adds	r1, r7, #6
 80005b8:	2201      	movs	r2, #1
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <SPIx_Write+0x38>)
 80005bc:	f004 fd5e 	bl	800507c <HAL_SPI_Transmit>
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80005ca:	f000 f809 	bl	80005e0 <SPIx_Error>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	2000006c 	.word	0x2000006c

080005e0 <SPIx_Error>:
  * @brief  SPIx error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <SPIx_Error+0x14>)
 80005e6:	f004 fd21 	bl	800502c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80005ea:	f7ff ff81 	bl	80004f0 <SPIx_Init>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000006c 	.word	0x2000006c

080005f8 <SPIx_MspInit>:
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <SPIx_MspInit+0x6c>)
 8000606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <SPIx_MspInit+0x6c>)
 800060a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060e:	6453      	str	r3, [r2, #68]	; 0x44
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <SPIx_MspInit+0x6c>)
 8000612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <SPIx_MspInit+0x6c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <SPIx_MspInit+0x6c>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <SPIx_MspInit+0x6c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000638:	f44f 7360 	mov.w	r3, #896	; 0x380
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000646:	2301      	movs	r3, #1
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800064a:	2305      	movs	r3, #5
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <SPIx_MspInit+0x70>)
 8000656:	f002 fdc5 	bl	80031e4 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40021400 	.word	0x40021400

0800066c <LCD_IO_Init>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000672:	4b36      	ldr	r3, [pc, #216]	; (800074c <LCD_IO_Init+0xe0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d164      	bne.n	8000744 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <LCD_IO_Init+0xe0>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b32      	ldr	r3, [pc, #200]	; (8000750 <LCD_IO_Init+0xe4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a31      	ldr	r2, [pc, #196]	; (8000750 <LCD_IO_Init+0xe4>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <LCD_IO_Init+0xe4>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4619      	mov	r1, r3
 80006b4:	4827      	ldr	r0, [pc, #156]	; (8000754 <LCD_IO_Init+0xe8>)
 80006b6:	f002 fd95 	bl	80031e4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <LCD_IO_Init+0xe4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <LCD_IO_Init+0xe4>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <LCD_IO_Init+0xe4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4819      	ldr	r0, [pc, #100]	; (8000754 <LCD_IO_Init+0xe8>)
 80006f0:	f002 fd78 	bl	80031e4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <LCD_IO_Init+0xe4>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <LCD_IO_Init+0xe4>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <LCD_IO_Init+0xe4>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000710:	2304      	movs	r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <LCD_IO_Init+0xec>)
 8000728:	f002 fd5c 	bl	80031e4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <LCD_IO_Init+0xec>)
 8000732:	f003 f80f 	bl	8003754 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000736:	2201      	movs	r2, #1
 8000738:	2104      	movs	r1, #4
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <LCD_IO_Init+0xec>)
 800073c:	f003 f80a 	bl	8003754 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000740:	f7ff fed6 	bl	80004f0 <SPIx_Init>
  }
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000c4 	.word	0x200000c4
 8000750:	40023800 	.word	0x40023800
 8000754:	40020c00 	.word	0x40020c00
 8000758:	40020800 	.word	0x40020800

0800075c <LCD_IO_WriteData>:
  * @brief  Writes register value.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <LCD_IO_WriteData+0x3c>)
 800076e:	f002 fff1 	bl	8003754 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <LCD_IO_WriteData+0x40>)
 8000778:	f002 ffec 	bl	8003754 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff10 	bl	80005a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000784:	2201      	movs	r2, #1
 8000786:	2104      	movs	r1, #4
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <LCD_IO_WriteData+0x40>)
 800078a:	f002 ffe3 	bl	8003754 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40020800 	.word	0x40020800

080007a0 <LCD_IO_WriteReg>:
  * @brief  Writes register address.
  * @param  None
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <LCD_IO_WriteReg+0x3c>)
 80007b2:	f002 ffcf 	bl	8003754 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80007b6:	2200      	movs	r2, #0
 80007b8:	2104      	movs	r1, #4
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <LCD_IO_WriteReg+0x40>)
 80007bc:	f002 ffca 	bl	8003754 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff feed 	bl	80005a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80007ca:	2201      	movs	r2, #1
 80007cc:	2104      	movs	r1, #4
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <LCD_IO_WriteReg+0x40>)
 80007d0:	f002 ffc0 	bl	8003754 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40020800 	.word	0x40020800

080007e4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	80fb      	strh	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80007f8:	2200      	movs	r2, #0
 80007fa:	2104      	movs	r1, #4
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <LCD_IO_ReadData+0x5c>)
 80007fe:	f002 ffa9 	bl	8003754 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	480e      	ldr	r0, [pc, #56]	; (8000844 <LCD_IO_ReadData+0x60>)
 800080a:	f002 ffa3 	bl	8003754 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fec7 	bl	80005a4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000816:	797b      	ldrb	r3, [r7, #5]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fea3 	bl	8000564 <SPIx_Read>
 800081e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <LCD_IO_ReadData+0x60>)
 8000828:	f002 ff94 	bl	8003754 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800082c:	2201      	movs	r2, #1
 800082e:	2104      	movs	r1, #4
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <LCD_IO_ReadData+0x5c>)
 8000832:	f002 ff8f 	bl	8003754 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40020800 	.word	0x40020800
 8000844:	40020c00 	.word	0x40020c00

08000848 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f001 ff47 	bl	80026e4 <HAL_Delay>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000862:	f7ff ff03 	bl	800066c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000866:	20ca      	movs	r0, #202	; 0xca
 8000868:	f000 f95d 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800086c:	20c3      	movs	r0, #195	; 0xc3
 800086e:	f000 f967 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000872:	2008      	movs	r0, #8
 8000874:	f000 f964 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000878:	2050      	movs	r0, #80	; 0x50
 800087a:	f000 f961 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800087e:	20cf      	movs	r0, #207	; 0xcf
 8000880:	f000 f951 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f95b 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800088a:	20c1      	movs	r0, #193	; 0xc1
 800088c:	f000 f958 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000890:	2030      	movs	r0, #48	; 0x30
 8000892:	f000 f955 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000896:	20ed      	movs	r0, #237	; 0xed
 8000898:	f000 f945 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 f94f 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 f94c 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80008a8:	2012      	movs	r0, #18
 80008aa:	f000 f949 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80008ae:	2081      	movs	r0, #129	; 0x81
 80008b0:	f000 f946 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80008b4:	20e8      	movs	r0, #232	; 0xe8
 80008b6:	f000 f936 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80008ba:	2085      	movs	r0, #133	; 0x85
 80008bc:	f000 f940 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f93d 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 f93a 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80008cc:	20cb      	movs	r0, #203	; 0xcb
 80008ce:	f000 f92a 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80008d2:	2039      	movs	r0, #57	; 0x39
 80008d4:	f000 f934 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80008d8:	202c      	movs	r0, #44	; 0x2c
 80008da:	f000 f931 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80008de:	2000      	movs	r0, #0
 80008e0:	f000 f92e 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80008e4:	2034      	movs	r0, #52	; 0x34
 80008e6:	f000 f92b 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80008ea:	2002      	movs	r0, #2
 80008ec:	f000 f928 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80008f0:	20f7      	movs	r0, #247	; 0xf7
 80008f2:	f000 f918 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80008f6:	2020      	movs	r0, #32
 80008f8:	f000 f922 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80008fc:	20ea      	movs	r0, #234	; 0xea
 80008fe:	f000 f912 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f91c 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f919 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800090e:	20b1      	movs	r0, #177	; 0xb1
 8000910:	f000 f909 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 f913 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800091a:	201b      	movs	r0, #27
 800091c:	f000 f910 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000920:	20b6      	movs	r0, #182	; 0xb6
 8000922:	f000 f900 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 f90a 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800092c:	20a2      	movs	r0, #162	; 0xa2
 800092e:	f000 f907 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000932:	20c0      	movs	r0, #192	; 0xc0
 8000934:	f000 f8f7 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000938:	2010      	movs	r0, #16
 800093a:	f000 f901 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800093e:	20c1      	movs	r0, #193	; 0xc1
 8000940:	f000 f8f1 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000944:	2010      	movs	r0, #16
 8000946:	f000 f8fb 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800094a:	20c5      	movs	r0, #197	; 0xc5
 800094c:	f000 f8eb 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000950:	2045      	movs	r0, #69	; 0x45
 8000952:	f000 f8f5 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000956:	2015      	movs	r0, #21
 8000958:	f000 f8f2 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800095c:	20c7      	movs	r0, #199	; 0xc7
 800095e:	f000 f8e2 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000962:	2090      	movs	r0, #144	; 0x90
 8000964:	f000 f8ec 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000968:	2036      	movs	r0, #54	; 0x36
 800096a:	f000 f8dc 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800096e:	20c8      	movs	r0, #200	; 0xc8
 8000970:	f000 f8e6 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000974:	20f2      	movs	r0, #242	; 0xf2
 8000976:	f000 f8d6 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f8e0 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000980:	20b0      	movs	r0, #176	; 0xb0
 8000982:	f000 f8d0 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000986:	20c2      	movs	r0, #194	; 0xc2
 8000988:	f000 f8da 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800098c:	20b6      	movs	r0, #182	; 0xb6
 800098e:	f000 f8ca 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000992:	200a      	movs	r0, #10
 8000994:	f000 f8d4 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000998:	20a7      	movs	r0, #167	; 0xa7
 800099a:	f000 f8d1 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800099e:	2027      	movs	r0, #39	; 0x27
 80009a0:	f000 f8ce 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80009a4:	2004      	movs	r0, #4
 80009a6:	f000 f8cb 	bl	8000b40 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80009aa:	202a      	movs	r0, #42	; 0x2a
 80009ac:	f000 f8bb 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f8c5 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f8c2 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f8bf 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80009c2:	20ef      	movs	r0, #239	; 0xef
 80009c4:	f000 f8bc 	bl	8000b40 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80009c8:	202b      	movs	r0, #43	; 0x2b
 80009ca:	f000 f8ac 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f8b6 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f8b3 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 f8b0 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80009e0:	203f      	movs	r0, #63	; 0x3f
 80009e2:	f000 f8ad 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80009e6:	20f6      	movs	r0, #246	; 0xf6
 80009e8:	f000 f89d 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 f8a7 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f8a4 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f000 f8a1 	bl	8000b40 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80009fe:	202c      	movs	r0, #44	; 0x2c
 8000a00:	f000 f891 	bl	8000b26 <ili9341_WriteReg>
  LCD_Delay(200);
 8000a04:	20c8      	movs	r0, #200	; 0xc8
 8000a06:	f7ff ff1f 	bl	8000848 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000a0a:	2026      	movs	r0, #38	; 0x26
 8000a0c:	f000 f88b 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 f895 	bl	8000b40 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000a16:	20e0      	movs	r0, #224	; 0xe0
 8000a18:	f000 f885 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f000 f88f 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000a22:	2029      	movs	r0, #41	; 0x29
 8000a24:	f000 f88c 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000a28:	2024      	movs	r0, #36	; 0x24
 8000a2a:	f000 f889 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000a2e:	200c      	movs	r0, #12
 8000a30:	f000 f886 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000a34:	200e      	movs	r0, #14
 8000a36:	f000 f883 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 f880 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000a40:	204e      	movs	r0, #78	; 0x4e
 8000a42:	f000 f87d 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000a46:	2078      	movs	r0, #120	; 0x78
 8000a48:	f000 f87a 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000a4c:	203c      	movs	r0, #60	; 0x3c
 8000a4e:	f000 f877 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000a52:	2009      	movs	r0, #9
 8000a54:	f000 f874 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000a58:	2013      	movs	r0, #19
 8000a5a:	f000 f871 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f000 f86e 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000a64:	2017      	movs	r0, #23
 8000a66:	f000 f86b 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000a6a:	2011      	movs	r0, #17
 8000a6c:	f000 f868 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f865 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000a76:	20e1      	movs	r0, #225	; 0xe1
 8000a78:	f000 f855 	bl	8000b26 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f85f 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000a82:	2016      	movs	r0, #22
 8000a84:	f000 f85c 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000a88:	201b      	movs	r0, #27
 8000a8a:	f000 f859 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f000 f856 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000a94:	2011      	movs	r0, #17
 8000a96:	f000 f853 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 f850 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000aa0:	2031      	movs	r0, #49	; 0x31
 8000aa2:	f000 f84d 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000aa6:	2033      	movs	r0, #51	; 0x33
 8000aa8:	f000 f84a 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000aac:	2042      	movs	r0, #66	; 0x42
 8000aae:	f000 f847 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000ab2:	2005      	movs	r0, #5
 8000ab4:	f000 f844 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f000 f841 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f000 f83e 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000ac4:	2028      	movs	r0, #40	; 0x28
 8000ac6:	f000 f83b 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000aca:	202f      	movs	r0, #47	; 0x2f
 8000acc:	f000 f838 	bl	8000b40 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f000 f835 	bl	8000b40 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f000 f825 	bl	8000b26 <ili9341_WriteReg>
  LCD_Delay(200);
 8000adc:	20c8      	movs	r0, #200	; 0xc8
 8000ade:	f7ff feb3 	bl	8000848 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000ae2:	2029      	movs	r0, #41	; 0x29
 8000ae4:	f000 f81f 	bl	8000b26 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000ae8:	202c      	movs	r0, #44	; 0x2c
 8000aea:	f000 f81c 	bl	8000b26 <ili9341_WriteReg>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000af6:	f7ff fdb9 	bl	800066c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000afa:	2103      	movs	r1, #3
 8000afc:	20d3      	movs	r0, #211	; 0xd3
 8000afe:	f000 f82c 	bl	8000b5a <ili9341_ReadData>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29b      	uxth	r3, r3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000b0e:	2029      	movs	r0, #41	; 0x29
 8000b10:	f000 f809 	bl	8000b26 <ili9341_WriteReg>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000b1c:	2028      	movs	r0, #40	; 0x28
 8000b1e:	f000 f802 	bl	8000b26 <ili9341_WriteReg>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fe34 	bl	80007a0 <LCD_IO_WriteReg>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe05 	bl	800075c <LCD_IO_WriteData>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	460a      	mov	r2, r1
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000b6a:	797a      	ldrb	r2, [r7, #5]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe37 	bl	80007e4 <LCD_IO_ReadData>
 8000b76:	4603      	mov	r3, r0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000b84:	23f0      	movs	r3, #240	; 0xf0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000b94:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000baa:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <BSP_LCD_Init+0xc0>)
 8000bac:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bb0:	2209      	movs	r2, #9
 8000bb2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bbc:	221d      	movs	r2, #29
 8000bbe:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bc8:	f240 120d 	movw	r2, #269	; 0x10d
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bd0:	f240 1243 	movw	r2, #323	; 0x143
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bd8:	f240 1217 	movw	r2, #279	; 0x117
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000be0:	f240 1247 	movw	r2, #327	; 0x147
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <BSP_LCD_Init+0xc4>)
 8000c00:	2208      	movs	r2, #8
 8000c02:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <BSP_LCD_Init+0xc4>)
 8000c06:	22c0      	movs	r2, #192	; 0xc0
 8000c08:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <BSP_LCD_Init+0xc4>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <BSP_LCD_Init+0xc4>)
 8000c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000c18:	4813      	ldr	r0, [pc, #76]	; (8000c68 <BSP_LCD_Init+0xc4>)
 8000c1a:	f003 ff2d 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8000c36:	f000 fa9f 	bl	8001178 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000c3a:	4809      	ldr	r0, [pc, #36]	; (8000c60 <BSP_LCD_Init+0xbc>)
 8000c3c:	f002 ff64 	bl	8003b08 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <BSP_LCD_Init+0xc8>)
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <BSP_LCD_Init+0xcc>)
 8000c44:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <BSP_LCD_Init+0xc8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8000c4e:	f000 fc81 	bl	8001554 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000c52:	4808      	ldr	r0, [pc, #32]	; (8000c74 <BSP_LCD_Init+0xd0>)
 8000c54:	f000 f8b4 	bl	8000dc0 <BSP_LCD_SetFont>

  return LCD_OK;
 8000c58:	2300      	movs	r3, #0
}  
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000c8 	.word	0x200000c8
 8000c64:	40016800 	.word	0x40016800
 8000c68:	200001b0 	.word	0x200001b0
 8000c6c:	200001fc 	.word	0x200001fc
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	20000004 	.word	0x20000004

08000c78 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <BSP_LCD_GetXSize+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	4798      	blx	r3
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001fc 	.word	0x200001fc

08000c90 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <BSP_LCD_GetYSize+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	4798      	blx	r3
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200001fc 	.word	0x200001fc

08000ca8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000cb8:	f7ff ffde 	bl	8000c78 <BSP_LCD_GetXSize>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000cc4:	f7ff ffe4 	bl	8000c90 <BSP_LCD_GetYSize>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000cd4:	23ff      	movs	r3, #255	; 0xff
 8000cd6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000cf8:	f7ff ffbe 	bl	8000c78 <BSP_LCD_GetXSize>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000d00:	f7ff ffc6 	bl	8000c90 <BSP_LCD_GetYSize>
 8000d04:	4603      	mov	r3, r0
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000d12:	f002 ffc9 	bl	8003ca8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000d16:	88fa      	ldrh	r2, [r7, #6]
 8000d18:	4913      	ldr	r1, [pc, #76]	; (8000d68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3304      	adds	r3, #4
 8000d26:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <BSP_LCD_LayerDefaultInit+0xc4>)
 8000d3e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	4909      	ldr	r1, [pc, #36]	; (8000d68 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d52:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000d56:	f002 ffe5 	bl	8003d24 <HAL_LTDC_EnableDither>
}
 8000d5a:	bf00      	nop
 8000d5c:	3740      	adds	r7, #64	; 0x40
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000c8 	.word	0x200000c8
 8000d68:	200001e4 	.word	0x200001e4
 8000d6c:	20000004 	.word	0x20000004

08000d70 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <BSP_LCD_SelectLayer+0x1c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	200001e0 	.word	0x200001e0

08000d90 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <BSP_LCD_SetTextColor+0x28>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <BSP_LCD_SetTextColor+0x2c>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	200001e0 	.word	0x200001e0
 8000dbc:	200001e4 	.word	0x200001e4

08000dc0 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <BSP_LCD_SetFont+0x2c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4908      	ldr	r1, [pc, #32]	; (8000df0 <BSP_LCD_SetFont+0x30>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200001e0 	.word	0x200001e0
 8000df0:	200001e4 	.word	0x200001e4

08000df4 <BSP_LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <BSP_LCD_GetFont+0x24>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <BSP_LCD_GetFont+0x28>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	3308      	adds	r3, #8
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200001e0 	.word	0x200001e0
 8000e1c:	200001e4 	.word	0x200001e4

08000e20 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <BSP_LCD_Clear+0x48>)
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <BSP_LCD_Clear+0x48>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <BSP_LCD_Clear+0x4c>)
 8000e32:	2134      	movs	r1, #52	; 0x34
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	335c      	adds	r3, #92	; 0x5c
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461e      	mov	r6, r3
 8000e40:	f7ff ff1a 	bl	8000c78 <BSP_LCD_GetXSize>
 8000e44:	4605      	mov	r5, r0
 8000e46:	f7ff ff23 	bl	8000c90 <BSP_LCD_GetYSize>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	2300      	movs	r3, #0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	4613      	mov	r3, r2
 8000e56:	462a      	mov	r2, r5
 8000e58:	4631      	mov	r1, r6
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f000 fb42 	bl	80014e4 <FillBuffer>
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e68:	200001e0 	.word	0x200001e0
 8000e6c:	200000c8 	.word	0x200000c8

08000e70 <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <BSP_LCD_DisplayChar+0x80>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	491b      	ldr	r1, [pc, #108]	; (8000ef4 <BSP_LCD_DisplayChar+0x84>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3308      	adds	r3, #8
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <BSP_LCD_DisplayChar+0x80>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4c14      	ldr	r4, [pc, #80]	; (8000ef4 <BSP_LCD_DisplayChar+0x84>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4423      	add	r3, r4
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000eb4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <BSP_LCD_DisplayChar+0x80>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4c0d      	ldr	r4, [pc, #52]	; (8000ef4 <BSP_LCD_DisplayChar+0x84>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4423      	add	r3, r4
 8000ec8:	3308      	adds	r3, #8
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	889b      	ldrh	r3, [r3, #4]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da00      	bge.n	8000ed6 <BSP_LCD_DisplayChar+0x66>
 8000ed4:	3307      	adds	r3, #7
 8000ed6:	10db      	asrs	r3, r3, #3
 8000ed8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000edc:	18ca      	adds	r2, r1, r3
 8000ede:	88b9      	ldrh	r1, [r7, #4]
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa44 	bl	8001370 <DrawChar>
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	200001e0 	.word	0x200001e0
 8000ef4:	200001e4 	.word	0x200001e4

08000ef8 <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	460b      	mov	r3, r1
 8000f08:	81bb      	strh	r3, [r7, #12]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	83fb      	strh	r3, [r7, #30]
 8000f12:	2300      	movs	r3, #0
 8000f14:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000f22:	e002      	b.n	8000f2a <BSP_LCD_DisplayStringAt+0x32>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	617a      	str	r2, [r7, #20]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f6      	bne.n	8000f24 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000f36:	f7ff fe9f 	bl	8000c78 <BSP_LCD_GetXSize>
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	4b4b      	ldr	r3, [pc, #300]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	484b      	ldr	r0, [pc, #300]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4403      	add	r3, r0
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	889b      	ldrh	r3, [r3, #4]
 8000f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f56:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d01c      	beq.n	8000f98 <BSP_LCD_DisplayStringAt+0xa0>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dc33      	bgt.n	8000fca <BSP_LCD_DisplayStringAt+0xd2>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d002      	beq.n	8000f6c <BSP_LCD_DisplayStringAt+0x74>
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d019      	beq.n	8000f9e <BSP_LCD_DisplayStringAt+0xa6>
 8000f6a:	e02e      	b.n	8000fca <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad1      	subs	r1, r2, r3
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	3308      	adds	r3, #8
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	889b      	ldrh	r3, [r3, #4]
 8000f88:	fb01 f303 	mul.w	r3, r1, r3
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	4413      	add	r3, r2
 8000f94:	83fb      	strh	r3, [r7, #30]
      break;
 8000f96:	e01b      	b.n	8000fd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	83fb      	strh	r3, [r7, #30]
      break;
 8000f9c:	e018      	b.n	8000fd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4831      	ldr	r0, [pc, #196]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	fb11 f303 	smulbb	r3, r1, r3
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	83fb      	strh	r3, [r7, #30]
      break;
 8000fc8:	e002      	b.n	8000fd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	83fb      	strh	r3, [r7, #30]
      break;
 8000fce:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000fd0:	e01a      	b.n	8001008 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	89b9      	ldrh	r1, [r7, #12]
 8000fd8:	8bfb      	ldrh	r3, [r7, #30]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff48 	bl	8000e70 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4922      	ldr	r1, [pc, #136]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	889a      	ldrh	r2, [r3, #4]
 8000ff6:	8bfb      	ldrh	r3, [r7, #30]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
    i++;
 8001002:	8bbb      	ldrh	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2dc      	uxtb	r4, r3
 8001016:	f7ff fe2f 	bl	8000c78 <BSP_LCD_GetXSize>
 800101a:	8bb9      	ldrh	r1, [r7, #28]
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4d13      	ldr	r5, [pc, #76]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	442b      	add	r3, r5
 800102c:	3308      	adds	r3, #8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	889b      	ldrh	r3, [r3, #4]
 8001032:	fb01 f303 	mul.w	r3, r1, r3
 8001036:	1ac3      	subs	r3, r0, r3
 8001038:	b299      	uxth	r1, r3
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <BSP_LCD_DisplayStringAt+0x174>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <BSP_LCD_DisplayStringAt+0x178>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4403      	add	r3, r0
 800104a:	3308      	adds	r3, #8
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	889b      	ldrh	r3, [r3, #4]
 8001050:	4299      	cmp	r1, r3
 8001052:	bf2c      	ite	cs
 8001054:	2301      	movcs	r3, #1
 8001056:	2300      	movcc	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4023      	ands	r3, r4
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1b7      	bne.n	8000fd2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	200001e0 	.word	0x200001e0
 8001070:	200001e4 	.word	0x200001e4

08001074 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001080:	f7ff feb8 	bl	8000df4 <BSP_LCD_GetFont>
 8001084:	4603      	mov	r3, r0
 8001086:	88db      	ldrh	r3, [r3, #6]
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	fb12 f303 	smulbb	r3, r2, r3
 800108e:	b299      	uxth	r1, r3
 8001090:	2303      	movs	r3, #3
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff2f 	bl	8000ef8 <BSP_LCD_DisplayStringAt>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80010a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af02      	add	r7, sp, #8
 80010ac:	4604      	mov	r4, r0
 80010ae:	4608      	mov	r0, r1
 80010b0:	4611      	mov	r1, r2
 80010b2:	461a      	mov	r2, r3
 80010b4:	4623      	mov	r3, r4
 80010b6:	80fb      	strh	r3, [r7, #6]
 80010b8:	4603      	mov	r3, r0
 80010ba:	80bb      	strh	r3, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <BSP_LCD_FillRect+0xa8>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4920      	ldr	r1, [pc, #128]	; (8001150 <BSP_LCD_FillRect+0xac>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe58 	bl	8000d90 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <BSP_LCD_FillRect+0xa8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <BSP_LCD_FillRect+0xb0>)
 80010e6:	2134      	movs	r1, #52	; 0x34
 80010e8:	fb01 f303 	mul.w	r3, r1, r3
 80010ec:	4413      	add	r3, r2
 80010ee:	335c      	adds	r3, #92	; 0x5c
 80010f0:	681c      	ldr	r4, [r3, #0]
 80010f2:	f7ff fdc1 	bl	8000c78 <BSP_LCD_GetXSize>
 80010f6:	4602      	mov	r2, r0
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	fb03 f202 	mul.w	r2, r3, r2
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4423      	add	r3, r4
 8001106:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <BSP_LCD_FillRect+0xa8>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	68fd      	ldr	r5, [r7, #12]
 800110e:	887e      	ldrh	r6, [r7, #2]
 8001110:	f8b7 8000 	ldrh.w	r8, [r7]
 8001114:	f7ff fdb0 	bl	8000c78 <BSP_LCD_GetXSize>
 8001118:	4602      	mov	r2, r0
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	1ad1      	subs	r1, r2, r3
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <BSP_LCD_FillRect+0xa8>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <BSP_LCD_FillRect+0xac>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4403      	add	r3, r0
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	9100      	str	r1, [sp, #0]
 8001134:	4643      	mov	r3, r8
 8001136:	4632      	mov	r2, r6
 8001138:	4629      	mov	r1, r5
 800113a:	4620      	mov	r0, r4
 800113c:	f000 f9d2 	bl	80014e4 <FillBuffer>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800114a:	bf00      	nop
 800114c:	200001e0 	.word	0x200001e0
 8001150:	200001e4 	.word	0x200001e4
 8001154:	200000c8 	.word	0x200000c8

08001158 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <BSP_LCD_DisplayOn+0x1c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <BSP_LCD_DisplayOn+0x1c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4798      	blx	r3
  }
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001fc 	.word	0x200001fc

08001178 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	4b61      	ldr	r3, [pc, #388]	; (8001308 <MspInit+0x190>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a60      	ldr	r2, [pc, #384]	; (8001308 <MspInit+0x190>)
 8001188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b5e      	ldr	r3, [pc, #376]	; (8001308 <MspInit+0x190>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	4b5a      	ldr	r3, [pc, #360]	; (8001308 <MspInit+0x190>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a59      	ldr	r2, [pc, #356]	; (8001308 <MspInit+0x190>)
 80011a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <MspInit+0x190>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b53      	ldr	r3, [pc, #332]	; (8001308 <MspInit+0x190>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a52      	ldr	r2, [pc, #328]	; (8001308 <MspInit+0x190>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <MspInit+0x190>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <MspInit+0x190>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <MspInit+0x190>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <MspInit+0x190>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <MspInit+0x190>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <MspInit+0x190>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <MspInit+0x190>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <MspInit+0x190>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <MspInit+0x190>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <MspInit+0x190>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <MspInit+0x190>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a36      	ldr	r2, [pc, #216]	; (8001308 <MspInit+0x190>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <MspInit+0x190>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <MspInit+0x190>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <MspInit+0x190>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <MspInit+0x190>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800125e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001270:	230e      	movs	r3, #14
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4824      	ldr	r0, [pc, #144]	; (800130c <MspInit+0x194>)
 800127c:	f001 ffb2 	bl	80031e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001280:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <MspInit+0x198>)
 800128e:	f001 ffa9 	bl	80031e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001292:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	481d      	ldr	r0, [pc, #116]	; (8001314 <MspInit+0x19c>)
 80012a0:	f001 ffa0 	bl	80031e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80012a4:	2348      	movs	r3, #72	; 0x48
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	481a      	ldr	r0, [pc, #104]	; (8001318 <MspInit+0x1a0>)
 80012b0:	f001 ff98 	bl	80031e4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <MspInit+0x1a4>)
 80012c2:	f001 ff8f 	bl	80031e4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80012c6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <MspInit+0x1a8>)
 80012d4:	f001 ff86 	bl	80031e4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80012d8:	2303      	movs	r3, #3
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80012dc:	2309      	movs	r3, #9
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	480a      	ldr	r0, [pc, #40]	; (8001310 <MspInit+0x198>)
 80012e8:	f001 ff7c 	bl	80031e4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80012ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <MspInit+0x1a8>)
 80012fa:	f001 ff73 	bl	80031e4 <HAL_GPIO_Init>
}
 80012fe:	bf00      	nop
 8001300:	3738      	adds	r7, #56	; 0x38
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800

08001324 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	603a      	str	r2, [r7, #0]
 800132e:	80fb      	strh	r3, [r7, #6]
 8001330:	460b      	mov	r3, r1
 8001332:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <BSP_LCD_DrawPixel+0x44>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <BSP_LCD_DrawPixel+0x48>)
 800133a:	2134      	movs	r1, #52	; 0x34
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	335c      	adds	r3, #92	; 0x5c
 8001344:	681c      	ldr	r4, [r3, #0]
 8001346:	88bd      	ldrh	r5, [r7, #4]
 8001348:	f7ff fc96 	bl	8000c78 <BSP_LCD_GetXSize>
 800134c:	4603      	mov	r3, r0
 800134e:	fb03 f205 	mul.w	r2, r3, r5
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4423      	add	r3, r4
 800135a:	461a      	mov	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	200001e0 	.word	0x200001e0
 800136c:	200000c8 	.word	0x200000c8

08001370 <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	603a      	str	r2, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]
 800137c:	460b      	mov	r3, r1
 800137e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <DrawChar+0x16c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4953      	ldr	r1, [pc, #332]	; (80014e0 <DrawChar+0x170>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3308      	adds	r3, #8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	88db      	ldrh	r3, [r3, #6]
 80013a2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <DrawChar+0x16c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	494d      	ldr	r1, [pc, #308]	; (80014e0 <DrawChar+0x170>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3308      	adds	r3, #8
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80013bc:	8a3b      	ldrh	r3, [r7, #16]
 80013be:	3307      	adds	r3, #7
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da00      	bge.n	80013c6 <DrawChar+0x56>
 80013c4:	3307      	adds	r3, #7
 80013c6:	10db      	asrs	r3, r3, #3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	8a3b      	ldrh	r3, [r7, #16]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e076      	b.n	80014ca <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80013dc:	8a3b      	ldrh	r3, [r7, #16]
 80013de:	3307      	adds	r3, #7
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da00      	bge.n	80013e6 <DrawChar+0x76>
 80013e4:	3307      	adds	r3, #7
 80013e6:	10db      	asrs	r3, r3, #3
 80013e8:	461a      	mov	r2, r3
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80013f6:	8a3b      	ldrh	r3, [r7, #16]
 80013f8:	3307      	adds	r3, #7
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da00      	bge.n	8001400 <DrawChar+0x90>
 80013fe:	3307      	adds	r3, #7
 8001400:	10db      	asrs	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d002      	beq.n	800140c <DrawChar+0x9c>
 8001406:	2b02      	cmp	r3, #2
 8001408:	d004      	beq.n	8001414 <DrawChar+0xa4>
 800140a:	e00c      	b.n	8001426 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	617b      	str	r3, [r7, #20]
      break;
 8001412:	e016      	b.n	8001442 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	3201      	adds	r2, #1
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
      break;
 8001424:	e00d      	b.n	8001442 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	041a      	lsls	r2, r3, #16
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	4313      	orrs	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	3202      	adds	r2, #2
 800143a:	7812      	ldrb	r2, [r2, #0]
 800143c:	4313      	orrs	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
      break;
 8001440:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e036      	b.n	80014b6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001448:	8a3a      	ldrh	r2, [r7, #16]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	1ad2      	subs	r2, r2, r3
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	4413      	add	r3, r2
 8001452:	3b01      	subs	r3, #1
 8001454:	2201      	movs	r2, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	461a      	mov	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d012      	beq.n	800148a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	b29a      	uxth	r2, r3
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4413      	add	r3, r2
 800146c:	b298      	uxth	r0, r3
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <DrawChar+0x16c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <DrawChar+0x170>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff ff4e 	bl	8001324 <BSP_LCD_DrawPixel>
 8001488:	e012      	b.n	80014b0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	b29a      	uxth	r2, r3
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4413      	add	r3, r2
 8001492:	b298      	uxth	r0, r3
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <DrawChar+0x16c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4911      	ldr	r1, [pc, #68]	; (80014e0 <DrawChar+0x170>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3304      	adds	r3, #4
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff ff3a 	bl	8001324 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	3301      	adds	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	8a3b      	ldrh	r3, [r7, #16]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3c4      	bcc.n	8001448 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	3301      	adds	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	8a7b      	ldrh	r3, [r7, #18]
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d384      	bcc.n	80013dc <DrawChar+0x6c>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200001e0 	.word	0x200001e0
 80014e0:	200001e4 	.word	0x200001e4

080014e4 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <FillBuffer+0x68>)
 80014f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014f8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <FillBuffer+0x68>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <FillBuffer+0x68>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <FillBuffer+0x68>)
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <FillBuffer+0x6c>)
 800150a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <FillBuffer+0x68>)
 800150e:	f001 fbdd 	bl	8002ccc <HAL_DMA2D_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d115      	bne.n	8001544 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <FillBuffer+0x68>)
 800151c:	f001 fd34 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69f9      	ldr	r1, [r7, #28]
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <FillBuffer+0x68>)
 8001532:	f001 fc14 	bl	8002d5e <HAL_DMA2D_Start>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d103      	bne.n	8001544 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800153c:	210a      	movs	r1, #10
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <FillBuffer+0x68>)
 8001540:	f001 fc38 	bl	8002db4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000170 	.word	0x20000170
 8001550:	4002b000 	.word	0x4002b000

08001554 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <BSP_SDRAM_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <BSP_SDRAM_Init+0x98>)
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <BSP_SDRAM_Init+0x98>)
 8001566:	2207      	movs	r2, #7
 8001568:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <BSP_SDRAM_Init+0x98>)
 800156c:	2204      	movs	r2, #4
 800156e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <BSP_SDRAM_Init+0x98>)
 8001572:	2207      	movs	r2, #7
 8001574:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <BSP_SDRAM_Init+0x98>)
 8001578:	2202      	movs	r2, #2
 800157a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <BSP_SDRAM_Init+0x98>)
 800157e:	2202      	movs	r2, #2
 8001580:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <BSP_SDRAM_Init+0x98>)
 8001584:	2202      	movs	r2, #2
 8001586:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 800158a:	2201      	movs	r2, #1
 800158c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 8001596:	2204      	movs	r2, #4
 8001598:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 800159c:	2210      	movs	r2, #16
 800159e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015a8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015ac:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ba:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 80015ca:	f000 f871 	bl	80016b0 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 80015ce:	4907      	ldr	r1, [pc, #28]	; (80015ec <BSP_SDRAM_Init+0x98>)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <BSP_SDRAM_Init+0x90>)
 80015d2:	f003 fc11 	bl	8004df8 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80015d6:	f240 506a 	movw	r0, #1386	; 0x56a
 80015da:	f000 f809 	bl	80015f0 <BSP_SDRAM_Initialization_sequence>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000200 	.word	0x20000200
 80015e8:	a0000140 	.word	0xa0000140
 80015ec:	20000234 	.word	0x20000234

080015f0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001604:	2208      	movs	r2, #8
 8001606:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800160a:	2201      	movs	r2, #1
 800160c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001618:	4923      	ldr	r1, [pc, #140]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800161a:	4824      	ldr	r0, [pc, #144]	; (80016ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800161c:	f003 fc20 	bl	8004e60 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f001 f85f 	bl	80026e4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800162e:	2208      	movs	r2, #8
 8001630:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001634:	2201      	movs	r2, #1
 8001636:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	4919      	ldr	r1, [pc, #100]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001644:	4819      	ldr	r0, [pc, #100]	; (80016ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001646:	f003 fc0b 	bl	8004e60 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800164c:	2203      	movs	r2, #3
 800164e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001652:	2208      	movs	r2, #8
 8001654:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001658:	2204      	movs	r2, #4
 800165a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	4910      	ldr	r1, [pc, #64]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800166a:	f003 fbf9 	bl	8004e60 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800166e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001672:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001676:	2204      	movs	r2, #4
 8001678:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800167c:	2208      	movs	r2, #8
 800167e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001682:	2201      	movs	r2, #1
 8001684:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800168a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	4905      	ldr	r1, [pc, #20]	; (80016a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001694:	f003 fbe4 	bl	8004e60 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4804      	ldr	r0, [pc, #16]	; (80016ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800169c:	f003 fc15 	bl	8004eca <HAL_SDRAM_ProgramRefreshRate>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000250 	.word	0x20000250
 80016ac:	20000200 	.word	0x20000200

080016b0 <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 80016b6:	4b79      	ldr	r3, [pc, #484]	; (800189c <MspInit+0x1ec>)
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <MspInit+0x1f0>)
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <MspInit+0x1f0>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6393      	str	r3, [r2, #56]	; 0x38
 80016ca:	4b75      	ldr	r3, [pc, #468]	; (80018a0 <MspInit+0x1f0>)
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b71      	ldr	r3, [pc, #452]	; (80018a0 <MspInit+0x1f0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a70      	ldr	r2, [pc, #448]	; (80018a0 <MspInit+0x1f0>)
 80016e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <MspInit+0x1f0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <MspInit+0x1f0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a69      	ldr	r2, [pc, #420]	; (80018a0 <MspInit+0x1f0>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <MspInit+0x1f0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <MspInit+0x1f0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a62      	ldr	r2, [pc, #392]	; (80018a0 <MspInit+0x1f0>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <MspInit+0x1f0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <MspInit+0x1f0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <MspInit+0x1f0>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <MspInit+0x1f0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <MspInit+0x1f0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <MspInit+0x1f0>)
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <MspInit+0x1f0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <MspInit+0x1f0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <MspInit+0x1f0>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <MspInit+0x1f0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <MspInit+0x1f0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <MspInit+0x1f0>)
 8001788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <MspInit+0x1f0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800179e:	2302      	movs	r3, #2
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80017a6:	230c      	movs	r3, #12
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	4619      	mov	r1, r3
 80017b4:	483b      	ldr	r0, [pc, #236]	; (80018a4 <MspInit+0x1f4>)
 80017b6:	f001 fd15 	bl	80031e4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4619      	mov	r1, r3
 80017c4:	4838      	ldr	r0, [pc, #224]	; (80018a8 <MspInit+0x1f8>)
 80017c6:	f001 fd0d 	bl	80031e4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80017ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80017ce:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4619      	mov	r1, r3
 80017d6:	4835      	ldr	r0, [pc, #212]	; (80018ac <MspInit+0x1fc>)
 80017d8:	f001 fd04 	bl	80031e4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80017dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80017e0:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	4619      	mov	r1, r3
 80017e8:	4831      	ldr	r0, [pc, #196]	; (80018b0 <MspInit+0x200>)
 80017ea:	f001 fcfb 	bl	80031e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80017ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80017f2:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4619      	mov	r1, r3
 80017fa:	482e      	ldr	r0, [pc, #184]	; (80018b4 <MspInit+0x204>)
 80017fc:	f001 fcf2 	bl	80031e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001800:	f248 1333 	movw	r3, #33075	; 0x8133
 8001804:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4619      	mov	r1, r3
 800180c:	482a      	ldr	r0, [pc, #168]	; (80018b8 <MspInit+0x208>)
 800180e:	f001 fce9 	bl	80031e4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <MspInit+0x20c>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <MspInit+0x20c>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800181e:	4b27      	ldr	r3, [pc, #156]	; (80018bc <MspInit+0x20c>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <MspInit+0x20c>)
 8001828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MspInit+0x20c>)
 8001830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001834:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MspInit+0x20c>)
 8001838:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MspInit+0x20c>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MspInit+0x20c>)
 8001846:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MspInit+0x20c>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MspInit+0x20c>)
 8001854:	2203      	movs	r2, #3
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MspInit+0x20c>)
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MspInit+0x20c>)
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MspInit+0x20c>)
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <MspInit+0x210>)
 8001868:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MspInit+0x20c>)
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <MspInit+0x20c>)
 8001872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001874:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001876:	4811      	ldr	r0, [pc, #68]	; (80018bc <MspInit+0x20c>)
 8001878:	f001 f918 	bl	8002aac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800187c:	480f      	ldr	r0, [pc, #60]	; (80018bc <MspInit+0x20c>)
 800187e:	f001 f867 	bl	8002950 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2038      	movs	r0, #56	; 0x38
 8001888:	f001 f82b 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800188c:	2038      	movs	r0, #56	; 0x38
 800188e:	f001 f844 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3738      	adds	r7, #56	; 0x38
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000200 	.word	0x20000200
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	20000260 	.word	0x20000260
 80018c0:	40026410 	.word	0x40026410

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f000 fe9a 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018cc:	f000 f848 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d0:	f000 fa88 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80018d4:	f000 f8b6 	bl	8001a44 <MX_DMA2D_Init>
  MX_FMC_Init();
 80018d8:	f000 fa36 	bl	8001d48 <MX_FMC_Init>
  MX_I2C3_Init();
 80018dc:	f000 f8e4 	bl	8001aa8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80018e0:	f000 f922 	bl	8001b28 <MX_LTDC_Init>
  MX_SPI5_Init();
 80018e4:	f000 f9d0 	bl	8001c88 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80018e8:	f000 fa04 	bl	8001cf4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80018ec:	f7ff f95a 	bl	8000ba4 <BSP_LCD_Init>
  /* USER CODE END 2 */
  BSP_LCD_Init();
 80018f0:	f7ff f958 	bl	8000ba4 <BSP_LCD_Init>
  	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
 80018f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff f9d5 	bl	8000ca8 <BSP_LCD_LayerDefaultInit>
  	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 80018fe:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff f9d0 	bl	8000ca8 <BSP_LCD_LayerDefaultInit>
  	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fa31 	bl	8000d70 <BSP_LCD_SelectLayer>
  	BSP_LCD_DisplayOn();
 800190e:	f7ff fc23 	bl	8001158 <BSP_LCD_DisplayOn>
  	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001912:	f04f 30ff 	mov.w	r0, #4294967295
 8001916:	f7ff fa83 	bl	8000e20 <BSP_LCD_Clear>
  /* Infinite loop */
	  BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800191a:	480c      	ldr	r0, [pc, #48]	; (800194c <main+0x88>)
 800191c:	f7ff fa38 	bl	8000d90 <BSP_LCD_SetTextColor>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <main+0x8c>)
 8001922:	f7ff fa35 	bl	8000d90 <BSP_LCD_SetTextColor>

	  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"Ahsan Line 1 and This is ");
 8001926:	490b      	ldr	r1, [pc, #44]	; (8001954 <main+0x90>)
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff fba3 	bl	8001074 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"Ahsan Line 2");
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <main+0x94>)
 8001930:	2002      	movs	r0, #2
 8001932:	f7ff fb9f 	bl	8001074 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <main+0x98>)
 8001938:	f7ff fa2a 	bl	8000d90 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(80,80 , 120,200 );
 800193c:	23c8      	movs	r3, #200	; 0xc8
 800193e:	2278      	movs	r2, #120	; 0x78
 8001940:	2150      	movs	r1, #80	; 0x50
 8001942:	2050      	movs	r0, #80	; 0x50
 8001944:	f7ff fbae 	bl	80010a4 <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001948:	e7ea      	b.n	8001920 <main+0x5c>
 800194a:	bf00      	nop
 800194c:	ff404040 	.word	0xff404040
 8001950:	ff0000ff 	.word	0xff0000ff
 8001954:	08006300 	.word	0x08006300
 8001958:	0800631c 	.word	0x0800631c
 800195c:	ffffa500 	.word	0xffffa500

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	; 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fcb2 	bl	80062d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <SystemClock_Config+0xdc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <SystemClock_Config+0xdc>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <SystemClock_Config+0xdc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <SystemClock_Config+0xe0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <SystemClock_Config+0xe0>)
 80019aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <SystemClock_Config+0xe0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d0:	2308      	movs	r3, #8
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80019d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019da:	2302      	movs	r3, #2
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019de:	2303      	movs	r3, #3
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fbae 	bl	8004148 <HAL_RCC_OscConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019f2:	f000 fa73 	bl	8001edc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019f6:	f002 fb57 	bl	80040a8 <HAL_PWREx_EnableOverDrive>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001a00:	f000 fa6c 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2105      	movs	r1, #5
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fe08 	bl	8004638 <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001a2e:	f000 fa55 	bl	8001edc <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	; 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MX_DMA2D_Init+0x60>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a7a:	f001 f927 	bl	8002ccc <HAL_DMA2D_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001a84:	f000 fa2a 	bl	8001edc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_DMA2D_Init+0x5c>)
 8001a8c:	f001 fa7c 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001a96:	f000 fa21 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002c0 	.word	0x200002c0
 8001aa4:	4002b000 	.word	0x4002b000

08001aa8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <MX_I2C3_Init+0x78>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <MX_I2C3_Init+0x7c>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001ae6:	f001 fe4f 	bl	8003788 <HAL_I2C_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001af0:	f000 f9f4 	bl	8001edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af4:	2100      	movs	r1, #0
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001af8:	f001 ff8a 	bl	8003a10 <HAL_I2CEx_ConfigAnalogFilter>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b02:	f000 f9eb 	bl	8001edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_I2C3_Init+0x74>)
 8001b0a:	f001 ffbd 	bl	8003a88 <HAL_I2CEx_ConfigDigitalFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b14:	f000 f9e2 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000300 	.word	0x20000300
 8001b20:	40005c00 	.word	0x40005c00
 8001b24:	000186a0 	.word	0x000186a0

08001b28 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b09a      	sub	sp, #104	; 0x68
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b32:	2234      	movs	r2, #52	; 0x34
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fbce 	bl	80062d8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2234      	movs	r2, #52	; 0x34
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fbc8 	bl	80062d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b48:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b4a:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <MX_LTDC_Init+0x15c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001b6c:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b6e:	2203      	movs	r2, #3
 8001b70:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b74:	220e      	movs	r2, #14
 8001b76:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b7a:	2205      	movs	r2, #5
 8001b7c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8001b7e:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b80:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b88:	22f5      	movs	r2, #245	; 0xf5
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8001b8c:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b8e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b96:	22f7      	movs	r2, #247	; 0xf7
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bb2:	4833      	ldr	r0, [pc, #204]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001bb4:	f001 ffa8 	bl	8003b08 <HAL_LTDC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8001bbe:	f000 f98d 	bl	8001edc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001be4:	2305      	movs	r3, #5
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481c      	ldr	r0, [pc, #112]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001c10:	f002 f84a 	bl	8003ca8 <HAL_LTDC_ConfigLayer>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8001c1a:	f000 f95f 	bl	8001edc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c40:	2305      	movs	r3, #5
 8001c42:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	2201      	movs	r2, #1
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_LTDC_Init+0x158>)
 8001c6a:	f002 f81d 	bl	8003ca8 <HAL_LTDC_ConfigLayer>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8001c74:	f000 f932 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3768      	adds	r7, #104	; 0x68
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000354 	.word	0x20000354
 8001c84:	40016800 	.word	0x40016800

08001c88 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_SPI5_Init+0x64>)
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <MX_SPI5_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_SPI5_Init+0x64>)
 8001c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_SPI5_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_SPI5_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_SPI5_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_SPI5_Init+0x64>)
 8001cda:	f003 f91e 	bl	8004f1a <HAL_SPI_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f000 f8fa 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003fc 	.word	0x200003fc
 8001cf0:	40015000 	.word	0x40015000

08001cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_USART1_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f003 fed4 	bl	8005ad8 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d36:	f000 f8d1 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000454 	.word	0x20000454
 8001d44:	40011000 	.word	0x40011000

08001d48 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <MX_FMC_Init+0x98>)
 8001d64:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_FMC_Init+0x94>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001da2:	2310      	movs	r3, #16
 8001da4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001da6:	2310      	movs	r3, #16
 8001da8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001daa:	2310      	movs	r3, #16
 8001dac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001dae:	2310      	movs	r3, #16
 8001db0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001db2:	2310      	movs	r3, #16
 8001db4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001db6:	2310      	movs	r3, #16
 8001db8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001dba:	2310      	movs	r3, #16
 8001dbc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_FMC_Init+0x94>)
 8001dc4:	f003 f818 	bl	8004df8 <HAL_SDRAM_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001dce:	f000 f885 	bl	8001edc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000498 	.word	0x20000498
 8001de0:	a0000140 	.word	0xa0000140

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a39      	ldr	r2, [pc, #228]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_GPIO_Init+0xf4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

}
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <Error_Handler+0x8>
	...

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_DMA2D_MspInit+0x3c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_DMA2D_MspInit+0x40>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_DMA2D_MspInit+0x40>)
 8001f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_DMA2D_MspInit+0x40>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	4002b000 	.word	0x4002b000
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <HAL_I2C_MspInit+0xc4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d14b      	bne.n	8002036 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fdc:	2312      	movs	r3, #18
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4815      	ldr	r0, [pc, #84]	; (8002048 <HAL_I2C_MspInit+0xcc>)
 8001ff4:	f001 f8f6 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffe:	2312      	movs	r3, #18
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800200a:	2304      	movs	r3, #4
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <HAL_I2C_MspInit+0xd0>)
 8002016:	f001 f8e5 	bl	80031e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 8002024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_I2C_MspInit+0xc8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40005c00 	.word	0x40005c00
 8002044:	40023800 	.word	0x40023800
 8002048:	40020800 	.word	0x40020800
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b09a      	sub	sp, #104	; 0x68
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	2230      	movs	r2, #48	; 0x30
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f004 f931 	bl	80062d8 <memset>
  if(hltdc->Instance==LTDC)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a81      	ldr	r2, [pc, #516]	; (8002280 <HAL_LTDC_MspInit+0x230>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f040 80fb 	bne.w	8002278 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002082:	2308      	movs	r3, #8
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8002086:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800208c:	2302      	movs	r3, #2
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002090:	2300      	movs	r3, #0
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fced 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80020a4:	f7ff ff1a 	bl	8001edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	4a74      	ldr	r2, [pc, #464]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020b6:	6453      	str	r3, [r2, #68]	; 0x44
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	4a66      	ldr	r2, [pc, #408]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6313      	str	r3, [r2, #48]	; 0x30
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	4b60      	ldr	r3, [pc, #384]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a5f      	ldr	r2, [pc, #380]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_LTDC_MspInit+0x234>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800217e:	230e      	movs	r3, #14
 8002180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002186:	4619      	mov	r1, r3
 8002188:	483f      	ldr	r0, [pc, #252]	; (8002288 <HAL_LTDC_MspInit+0x238>)
 800218a:	f001 f82b 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800218e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002192:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a0:	230e      	movs	r3, #14
 80021a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021a8:	4619      	mov	r1, r3
 80021aa:	4838      	ldr	r0, [pc, #224]	; (800228c <HAL_LTDC_MspInit+0x23c>)
 80021ac:	f001 f81a 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021b0:	2303      	movs	r3, #3
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021c0:	2309      	movs	r3, #9
 80021c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021c8:	4619      	mov	r1, r3
 80021ca:	4831      	ldr	r0, [pc, #196]	; (8002290 <HAL_LTDC_MspInit+0x240>)
 80021cc:	f001 f80a 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80021d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e2:	230e      	movs	r3, #14
 80021e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ea:	4619      	mov	r1, r3
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <HAL_LTDC_MspInit+0x240>)
 80021ee:	f000 fff9 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80021f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80021f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002204:	230e      	movs	r3, #14
 8002206:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800220c:	4619      	mov	r1, r3
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <HAL_LTDC_MspInit+0x244>)
 8002210:	f000 ffe8 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002214:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002218:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002226:	230e      	movs	r3, #14
 8002228:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800222e:	4619      	mov	r1, r3
 8002230:	4819      	ldr	r0, [pc, #100]	; (8002298 <HAL_LTDC_MspInit+0x248>)
 8002232:	f000 ffd7 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002236:	2348      	movs	r3, #72	; 0x48
 8002238:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002246:	230e      	movs	r3, #14
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800224e:	4619      	mov	r1, r3
 8002250:	4812      	ldr	r0, [pc, #72]	; (800229c <HAL_LTDC_MspInit+0x24c>)
 8002252:	f000 ffc7 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002268:	2309      	movs	r3, #9
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800226c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002270:	4619      	mov	r1, r3
 8002272:	4808      	ldr	r0, [pc, #32]	; (8002294 <HAL_LTDC_MspInit+0x244>)
 8002274:	f000 ffb6 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3768      	adds	r7, #104	; 0x68
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40016800 	.word	0x40016800
 8002284:	40023800 	.word	0x40023800
 8002288:	40021400 	.word	0x40021400
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40021800 	.word	0x40021800
 8002298:	40020800 	.word	0x40020800
 800229c:	40020c00 	.word	0x40020c00

080022a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_SPI_MspInit+0x84>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12c      	bne.n	800231c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_SPI_MspInit+0x88>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800230c:	2305      	movs	r3, #5
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_SPI_MspInit+0x8c>)
 8002318:	f000 ff64 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40015000 	.word	0x40015000
 8002328:	40023800 	.word	0x40023800
 800232c:	40021400 	.word	0x40021400

08002330 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_SPI_MspDeInit+0x30>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_SPI_MspDeInit+0x34>)
 8002348:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800234e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_SPI_MspDeInit+0x38>)
 8002354:	f001 f8f2 	bl	800353c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40015000 	.word	0x40015000
 8002364:	40023800 	.word	0x40023800
 8002368:	40021400 	.word	0x40021400

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12c      	bne.n	80023e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_UART_MspInit+0x88>)
 8002398:	f043 0310 	orr.w	r3, r3, #16
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d8:	2307      	movs	r3, #7
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <HAL_UART_MspInit+0x8c>)
 80023e4:	f000 fefe 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_FMC_MspInit+0x104>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d16f      	bne.n	80024f8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_FMC_MspInit+0x104>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	4a37      	ldr	r2, [pc, #220]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6393      	str	r3, [r2, #56]	; 0x38
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_FMC_MspInit+0x108>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800243a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800243e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	482c      	ldr	r0, [pc, #176]	; (8002508 <HAL_FMC_MspInit+0x10c>)
 8002456:	f000 fec5 	bl	80031e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800246a:	230c      	movs	r3, #12
 800246c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4826      	ldr	r0, [pc, #152]	; (800250c <HAL_FMC_MspInit+0x110>)
 8002474:	f000 feb6 	bl	80031e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002478:	f248 1333 	movw	r3, #33075	; 0x8133
 800247c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248a:	230c      	movs	r3, #12
 800248c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	481f      	ldr	r0, [pc, #124]	; (8002510 <HAL_FMC_MspInit+0x114>)
 8002494:	f000 fea6 	bl	80031e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002498:	f64f 7383 	movw	r3, #65411	; 0xff83
 800249c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024aa:	230c      	movs	r3, #12
 80024ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <HAL_FMC_MspInit+0x118>)
 80024b4:	f000 fe96 	bl	80031e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80024b8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ca:	230c      	movs	r3, #12
 80024cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4811      	ldr	r0, [pc, #68]	; (8002518 <HAL_FMC_MspInit+0x11c>)
 80024d4:	f000 fe86 	bl	80031e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024e8:	230c      	movs	r3, #12
 80024ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	480a      	ldr	r0, [pc, #40]	; (800251c <HAL_FMC_MspInit+0x120>)
 80024f2:	f000 fe77 	bl	80031e4 <HAL_GPIO_Init>
 80024f6:	e000      	b.n	80024fa <HAL_FMC_MspInit+0xfe>
    return;
 80024f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200004cc 	.word	0x200004cc
 8002504:	40023800 	.word	0x40023800
 8002508:	40021400 	.word	0x40021400
 800250c:	40020800 	.word	0x40020800
 8002510:	40021800 	.word	0x40021800
 8002514:	40021000 	.word	0x40021000
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40020400 	.word	0x40020400

08002520 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002528:	f7ff ff68 	bl	80023fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <NMI_Handler+0x4>

0800253a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <HardFault_Handler+0x4>

08002540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <MemManage_Handler+0x4>

08002546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <UsageFault_Handler+0x4>

08002552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 f890 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d6:	f7ff ffd7 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f003 fe59 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff f971 	bl	80018c4 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80025f0:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 80025f4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80025f8:	200004d4 	.word	0x200004d4

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f94f 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fc58 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f967 	bl	8002936 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f92f 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000044 	.word	0x20000044
 800269c:	2000004c 	.word	0x2000004c
 80026a0:	20000048 	.word	0x20000048

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000004c 	.word	0x2000004c
 80026c8:	200004d0 	.word	0x200004d0

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200004d0 	.word	0x200004d0

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000004c 	.word	0x2000004c

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff feb6 	bl	80026cc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e099      	b.n	8002aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	e00f      	b.n	80029ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff fe9d 	bl	80026cc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d908      	bls.n	80029ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e078      	b.n	8002aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e8      	bne.n	800298e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_DMA_Init+0x158>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4313      	orrs	r3, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d117      	bne.n	8002a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8bd 	bl	8002bd4 <DMA_CheckFifoParam>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e016      	b.n	8002aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f874 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	223f      	movs	r2, #63	; 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	f010803f 	.word	0xf010803f

08002aac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e050      	b.n	8002b60 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e048      	b.n	8002b60 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2221      	movs	r2, #33	; 0x21
 8002b0c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f82a 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8002b14:	4603      	mov	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	223f      	movs	r2, #63	; 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3b10      	subs	r3, #16
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <DMA_CalcBaseAndBitshift+0x64>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d909      	bls.n	8002baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba8:	e007      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	08007dfc 	.word	0x08007dfc

08002bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d856      	bhi.n	8002ca2 <DMA_CheckFifoParam+0xce>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <DMA_CheckFifoParam+0x28>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c1f 	.word	0x08002c1f
 8002c04:	08002c0d 	.word	0x08002c0d
 8002c08:	08002ca3 	.word	0x08002ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d046      	beq.n	8002ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e043      	b.n	8002ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c26:	d140      	bne.n	8002caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e03d      	b.n	8002caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	d121      	bne.n	8002c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d837      	bhi.n	8002cae <DMA_CheckFifoParam+0xda>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <DMA_CheckFifoParam+0x70>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c5b 	.word	0x08002c5b
 8002c4c:	08002c55 	.word	0x08002c55
 8002c50:	08002c6d 	.word	0x08002c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e030      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d025      	beq.n	8002cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e022      	b.n	8002cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7a:	e01c      	b.n	8002cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d903      	bls.n	8002c8a <DMA_CheckFifoParam+0xb6>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d003      	beq.n	8002c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c88:	e018      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8e:	e015      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e00b      	b.n	8002cba <DMA_CheckFifoParam+0xe6>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e00a      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e008      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e006      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e004      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e03b      	b.n	8002d56 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff f920 	bl	8001f38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	f023 0107 	bic.w	r1, r3, #7
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d1      	ldr	r1, [r2, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA2D_Start+0x1c>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e018      	b.n	8002dac <HAL_DMA2D_Start+0x4e>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f989 	bl	80030ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0201 	orr.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d056      	beq.n	8002e7e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7ff fc7c 	bl	80026cc <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002dd6:	e04b      	b.n	8002e70 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d023      	beq.n	8002e32 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f043 0202 	orr.w	r2, r3, #2
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2221      	movs	r2, #33	; 0x21
 8002e1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0a5      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7ff fc47 	bl	80026cc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <HAL_DMA2D_PollForTransfer+0x9c>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e086      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ac      	beq.n	8002dd8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d061      	beq.n	8002f64 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7ff fc14 	bl	80026cc <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ea6:	e056      	b.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2229      	movs	r2, #41	; 0x29
 8002f02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7ff fbd4 	bl	80026cc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <HAL_DMA2D_PollForTransfer+0x182>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e013      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0a1      	beq.n	8002ea8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2212      	movs	r2, #18
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA2D_ConfigLayer+0x20>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e079      	b.n	800309c <HAL_DMA2D_ConfigLayer+0x114>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fd2:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002fd4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d003      	beq.n	8002fe6 <HAL_DMA2D_ConfigLayer+0x5e>
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	d107      	bne.n	8002ff6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e005      	b.n	8003002 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d120      	bne.n	800304a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	ea02 0103 	and.w	r1, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	430a      	orrs	r2, r1
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b0a      	cmp	r3, #10
 8003030:	d003      	beq.n	800303a <HAL_DMA2D_ConfigLayer+0xb2>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d127      	bne.n	800308a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
 8003048:	e01f      	b.n	800308a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	ea02 0103 	and.w	r1, r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b0a      	cmp	r3, #10
 8003072:	d003      	beq.n	800307c <HAL_DMA2D_ConfigLayer+0xf4>
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b09      	cmp	r3, #9
 800307a:	d106      	bne.n	800308a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003088:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	ff03000f 	.word	0xff03000f

080030ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b08b      	sub	sp, #44	; 0x2c
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	041a      	lsls	r2, r3, #16
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e4:	d174      	bne.n	80031d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	431a      	orrs	r2, r3
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
 800311c:	e053      	b.n	80031c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d106      	bne.n	8003134 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4313      	orrs	r3, r2
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e048      	b.n	80031c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d111      	bne.n	8003160 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	0cdb      	lsrs	r3, r3, #19
 8003140:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	0a9b      	lsrs	r3, r3, #10
 8003146:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	08db      	lsrs	r3, r3, #3
 800314c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	02db      	lsls	r3, r3, #11
 8003156:	4313      	orrs	r3, r2
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	e032      	b.n	80031c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d117      	bne.n	8003198 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	0fdb      	lsrs	r3, r3, #31
 800316c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	0cdb      	lsrs	r3, r3, #19
 8003172:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	0adb      	lsrs	r3, r3, #11
 8003178:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	431a      	orrs	r2, r3
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	03db      	lsls	r3, r3, #15
 800318e:	4313      	orrs	r3, r2
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	e016      	b.n	80031c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	0f1b      	lsrs	r3, r3, #28
 800319c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	0d1b      	lsrs	r3, r3, #20
 80031a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	0b1b      	lsrs	r3, r3, #12
 80031a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	011a      	lsls	r2, r3, #4
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	431a      	orrs	r2, r3
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	4313      	orrs	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031ce:	e003      	b.n	80031d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	60da      	str	r2, [r3, #12]
}
 80031d8:	bf00      	nop
 80031da:	372c      	adds	r7, #44	; 0x2c
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e177      	b.n	80034f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8166 	bne.w	80034ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d005      	beq.n	8003236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	2b02      	cmp	r3, #2
 8003234:	d130      	bne.n	8003298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0201 	and.w	r2, r3, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d017      	beq.n	80032d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d123      	bne.n	8003328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08da      	lsrs	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3208      	adds	r2, #8
 8003322:	69b9      	ldr	r1, [r7, #24]
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80c0 	beq.w	80034ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_GPIO_Init+0x324>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_GPIO_Init+0x324>)
 8003374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_GPIO_Init+0x324>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003386:	4a61      	ldr	r2, [pc, #388]	; (800350c <HAL_GPIO_Init+0x328>)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a58      	ldr	r2, [pc, #352]	; (8003510 <HAL_GPIO_Init+0x32c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d037      	beq.n	8003422 <HAL_GPIO_Init+0x23e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_GPIO_Init+0x330>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_GPIO_Init+0x23a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a56      	ldr	r2, [pc, #344]	; (8003518 <HAL_GPIO_Init+0x334>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02b      	beq.n	800341a <HAL_GPIO_Init+0x236>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a55      	ldr	r2, [pc, #340]	; (800351c <HAL_GPIO_Init+0x338>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d025      	beq.n	8003416 <HAL_GPIO_Init+0x232>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a54      	ldr	r2, [pc, #336]	; (8003520 <HAL_GPIO_Init+0x33c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <HAL_GPIO_Init+0x22e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a53      	ldr	r2, [pc, #332]	; (8003524 <HAL_GPIO_Init+0x340>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_Init+0x22a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a52      	ldr	r2, [pc, #328]	; (8003528 <HAL_GPIO_Init+0x344>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_Init+0x226>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a51      	ldr	r2, [pc, #324]	; (800352c <HAL_GPIO_Init+0x348>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_Init+0x222>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a50      	ldr	r2, [pc, #320]	; (8003530 <HAL_GPIO_Init+0x34c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_Init+0x21e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4f      	ldr	r2, [pc, #316]	; (8003534 <HAL_GPIO_Init+0x350>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_Init+0x21a>
 80033fa:	2309      	movs	r3, #9
 80033fc:	e012      	b.n	8003424 <HAL_GPIO_Init+0x240>
 80033fe:	230a      	movs	r3, #10
 8003400:	e010      	b.n	8003424 <HAL_GPIO_Init+0x240>
 8003402:	2308      	movs	r3, #8
 8003404:	e00e      	b.n	8003424 <HAL_GPIO_Init+0x240>
 8003406:	2307      	movs	r3, #7
 8003408:	e00c      	b.n	8003424 <HAL_GPIO_Init+0x240>
 800340a:	2306      	movs	r3, #6
 800340c:	e00a      	b.n	8003424 <HAL_GPIO_Init+0x240>
 800340e:	2305      	movs	r3, #5
 8003410:	e008      	b.n	8003424 <HAL_GPIO_Init+0x240>
 8003412:	2304      	movs	r3, #4
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x240>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_Init+0x240>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_Init+0x240>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x240>
 8003422:	2300      	movs	r3, #0
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003434:	4935      	ldr	r1, [pc, #212]	; (800350c <HAL_GPIO_Init+0x328>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_GPIO_Init+0x354>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_GPIO_Init+0x354>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b32      	ldr	r3, [pc, #200]	; (8003538 <HAL_GPIO_Init+0x354>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_GPIO_Init+0x354>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003496:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_GPIO_Init+0x354>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_GPIO_Init+0x354>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_GPIO_Init+0x354>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_GPIO_Init+0x354>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	f67f ae84 	bls.w	8003200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40013800 	.word	0x40013800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40021400 	.word	0x40021400
 8003528:	40021800 	.word	0x40021800
 800352c:	40021c00 	.word	0x40021c00
 8003530:	40022000 	.word	0x40022000
 8003534:	40022400 	.word	0x40022400
 8003538:	40013c00 	.word	0x40013c00

0800353c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e0d9      	b.n	800370c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003558:	2201      	movs	r2, #1
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	429a      	cmp	r2, r3
 8003570:	f040 80c9 	bne.w	8003706 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_GPIO_DeInit+0x1e8>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a63      	ldr	r2, [pc, #396]	; (8003728 <HAL_GPIO_DeInit+0x1ec>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d037      	beq.n	800360e <HAL_GPIO_DeInit+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a62      	ldr	r2, [pc, #392]	; (800372c <HAL_GPIO_DeInit+0x1f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_GPIO_DeInit+0xce>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a61      	ldr	r2, [pc, #388]	; (8003730 <HAL_GPIO_DeInit+0x1f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02b      	beq.n	8003606 <HAL_GPIO_DeInit+0xca>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_GPIO_DeInit+0x1f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d025      	beq.n	8003602 <HAL_GPIO_DeInit+0xc6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a5f      	ldr	r2, [pc, #380]	; (8003738 <HAL_GPIO_DeInit+0x1fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01f      	beq.n	80035fe <HAL_GPIO_DeInit+0xc2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a5e      	ldr	r2, [pc, #376]	; (800373c <HAL_GPIO_DeInit+0x200>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d019      	beq.n	80035fa <HAL_GPIO_DeInit+0xbe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	; (8003740 <HAL_GPIO_DeInit+0x204>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_GPIO_DeInit+0xba>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a5c      	ldr	r2, [pc, #368]	; (8003744 <HAL_GPIO_DeInit+0x208>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00d      	beq.n	80035f2 <HAL_GPIO_DeInit+0xb6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a5b      	ldr	r2, [pc, #364]	; (8003748 <HAL_GPIO_DeInit+0x20c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <HAL_GPIO_DeInit+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a5a      	ldr	r2, [pc, #360]	; (800374c <HAL_GPIO_DeInit+0x210>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_GPIO_DeInit+0xae>
 80035e6:	2309      	movs	r3, #9
 80035e8:	e012      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035ea:	230a      	movs	r3, #10
 80035ec:	e010      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035ee:	2308      	movs	r3, #8
 80035f0:	e00e      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e00c      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035f6:	2306      	movs	r3, #6
 80035f8:	e00a      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035fa:	2305      	movs	r3, #5
 80035fc:	e008      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 80035fe:	2304      	movs	r3, #4
 8003600:	e006      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 8003602:	2303      	movs	r3, #3
 8003604:	e004      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 8003606:	2302      	movs	r3, #2
 8003608:	e002      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_GPIO_DeInit+0xd4>
 800360e:	2300      	movs	r3, #0
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	f002 0203 	and.w	r2, r2, #3
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	4093      	lsls	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d132      	bne.n	8003686 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003620:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	4949      	ldr	r1, [pc, #292]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 800362a:	4013      	ands	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	4946      	ldr	r1, [pc, #280]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 8003638:	4013      	ands	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800363c:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	4942      	ldr	r1, [pc, #264]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 8003646:	4013      	ands	r3, r2
 8003648:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43db      	mvns	r3, r3
 8003652:	493f      	ldr	r1, [pc, #252]	; (8003750 <HAL_GPIO_DeInit+0x214>)
 8003654:	4013      	ands	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <HAL_GPIO_DeInit+0x1e8>)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	43da      	mvns	r2, r3
 8003678:	482a      	ldr	r0, [pc, #168]	; (8003724 <HAL_GPIO_DeInit+0x1e8>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	400a      	ands	r2, r1
 8003680:	3302      	adds	r3, #2
 8003682:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2103      	movs	r1, #3
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	08d2      	lsrs	r2, r2, #3
 80036bc:	4019      	ands	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3208      	adds	r2, #8
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2103      	movs	r1, #3
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	401a      	ands	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2101      	movs	r1, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	2103      	movs	r1, #3
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	f67f af22 	bls.w	8003558 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40021c00 	.word	0x40021c00
 8003748:	40022000 	.word	0x40022000
 800374c:	40022400 	.word	0x40022400
 8003750:	40013c00 	.word	0x40013c00

08003754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]
 8003760:	4613      	mov	r3, r2
 8003762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003764:	787b      	ldrb	r3, [r7, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003770:	e003      	b.n	800377a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003772:	887b      	ldrh	r3, [r7, #2]
 8003774:	041a      	lsls	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	619a      	str	r2, [r3, #24]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e12b      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe fbe4 	bl	8001f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037ec:	f001 f91c 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 80037f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a81      	ldr	r2, [pc, #516]	; (80039fc <HAL_I2C_Init+0x274>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d807      	bhi.n	800380c <HAL_I2C_Init+0x84>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a80      	ldr	r2, [pc, #512]	; (8003a00 <HAL_I2C_Init+0x278>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e006      	b.n	800381a <HAL_I2C_Init+0x92>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a7d      	ldr	r2, [pc, #500]	; (8003a04 <HAL_I2C_Init+0x27c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0e7      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a78      	ldr	r2, [pc, #480]	; (8003a08 <HAL_I2C_Init+0x280>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a6a      	ldr	r2, [pc, #424]	; (80039fc <HAL_I2C_Init+0x274>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d802      	bhi.n	800385c <HAL_I2C_Init+0xd4>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	e009      	b.n	8003870 <HAL_I2C_Init+0xe8>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a69      	ldr	r2, [pc, #420]	; (8003a0c <HAL_I2C_Init+0x284>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	3301      	adds	r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	495c      	ldr	r1, [pc, #368]	; (80039fc <HAL_I2C_Init+0x274>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d819      	bhi.n	80038c4 <HAL_I2C_Init+0x13c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e59      	subs	r1, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fbb1 f3f3 	udiv	r3, r1, r3
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a4:	400b      	ands	r3, r1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_I2C_Init+0x138>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e59      	subs	r1, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038be:	e051      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e04f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_I2C_Init+0x168>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e012      	b.n	8003916 <HAL_I2C_Init+0x18e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x196>
 800391a:	2301      	movs	r3, #1
 800391c:	e022      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <HAL_I2C_Init+0x1bc>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e58      	subs	r0, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	440b      	add	r3, r1
 8003934:	fbb0 f3f3 	udiv	r3, r0, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	6809      	ldr	r1, [r1, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6911      	ldr	r1, [r2, #16]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68d2      	ldr	r2, [r2, #12]
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	000186a0 	.word	0x000186a0
 8003a00:	001e847f 	.word	0x001e847f
 8003a04:	003d08ff 	.word	0x003d08ff
 8003a08:	431bde83 	.word	0x431bde83
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d129      	bne.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2224      	movs	r2, #36	; 0x24
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d12a      	bne.n	8003af8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ac2:	89fb      	ldrh	r3, [r7, #14]
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	89fb      	ldrh	r3, [r7, #14]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	89fa      	ldrh	r2, [r7, #14]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0bf      	b.n	8003c9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fa8e 	bl	8002050 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003b4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6999      	ldr	r1, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6899      	ldr	r1, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_LTDC_Init+0x19c>)
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68d9      	ldr	r1, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <HAL_LTDC_Init+0x19c>)
 8003baa:	400b      	ands	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68d9      	ldr	r1, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6919      	ldr	r1, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_LTDC_Init+0x19c>)
 8003bd8:	400b      	ands	r3, r1
 8003bda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6959      	ldr	r1, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_LTDC_Init+0x19c>)
 8003c06:	400b      	ands	r3, r1
 8003c08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6959      	ldr	r1, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0206 	orr.w	r2, r2, #6
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	f000f800 	.word	0xf000f800

08003ca8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ca8:	b5b0      	push	{r4, r5, r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_LTDC_ConfigLayer+0x1a>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e02c      	b.n	8003d1c <HAL_LTDC_ConfigLayer+0x74>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2134      	movs	r1, #52	; 0x34
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f83b 	bl	8003d78 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bdb0      	pop	{r4, r5, r7, pc}

08003d24 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_LTDC_EnableDither+0x16>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e016      	b.n	8003d68 <HAL_LTDC_EnableDither+0x44>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_LTDC_EnableDither+0x50>)
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_LTDC_EnableDither+0x50>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40016800 	.word	0x40016800

08003d78 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	4413      	add	r3, r2
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	01db      	lsls	r3, r3, #7
 8003da4:	4413      	add	r3, r2
 8003da6:	3384      	adds	r3, #132	; 0x84
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	4611      	mov	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	01d2      	lsls	r2, r2, #7
 8003db4:	440a      	add	r2, r1
 8003db6:	3284      	adds	r2, #132	; 0x84
 8003db8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003dbc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dd0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	01db      	lsls	r3, r3, #7
 8003ddc:	440b      	add	r3, r1
 8003dde:	3384      	adds	r3, #132	; 0x84
 8003de0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003de6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df6:	4413      	add	r3, r2
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	4413      	add	r3, r2
 8003e08:	3384      	adds	r3, #132	; 0x84
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4611      	mov	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	01d2      	lsls	r2, r2, #7
 8003e16:	440a      	add	r2, r1
 8003e18:	3284      	adds	r2, #132	; 0x84
 8003e1a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e1e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2e:	4413      	add	r3, r2
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3384      	adds	r3, #132	; 0x84
 8003e40:	4619      	mov	r1, r3
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	01db      	lsls	r3, r3, #7
 8003e52:	4413      	add	r3, r2
 8003e54:	3384      	adds	r3, #132	; 0x84
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	01d2      	lsls	r2, r2, #7
 8003e62:	440a      	add	r2, r1
 8003e64:	3284      	adds	r2, #132	; 0x84
 8003e66:	f023 0307 	bic.w	r3, r3, #7
 8003e6a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	01db      	lsls	r3, r3, #7
 8003e76:	4413      	add	r3, r2
 8003e78:	3384      	adds	r3, #132	; 0x84
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3384      	adds	r3, #132	; 0x84
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	01db      	lsls	r3, r3, #7
 8003eb8:	4413      	add	r3, r2
 8003eba:	3384      	adds	r3, #132	; 0x84
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ec8:	461a      	mov	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	01db      	lsls	r3, r3, #7
 8003edc:	440b      	add	r3, r1
 8003ede:	3384      	adds	r3, #132	; 0x84
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	01db      	lsls	r3, r3, #7
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3384      	adds	r3, #132	; 0x84
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	4611      	mov	r1, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	01d2      	lsls	r2, r2, #7
 8003f02:	440a      	add	r2, r1
 8003f04:	3284      	adds	r2, #132	; 0x84
 8003f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	01db      	lsls	r3, r3, #7
 8003f16:	4413      	add	r3, r2
 8003f18:	3384      	adds	r3, #132	; 0x84
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	01db      	lsls	r3, r3, #7
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3384      	adds	r3, #132	; 0x84
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	4611      	mov	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	01d2      	lsls	r2, r2, #7
 8003f3c:	440a      	add	r2, r1
 8003f3e:	3284      	adds	r2, #132	; 0x84
 8003f40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	6809      	ldr	r1, [r1, #0]
 8003f56:	4608      	mov	r0, r1
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	01c9      	lsls	r1, r1, #7
 8003f5c:	4401      	add	r1, r0
 8003f5e:	3184      	adds	r1, #132	; 0x84
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	01db      	lsls	r3, r3, #7
 8003f6e:	4413      	add	r3, r2
 8003f70:	3384      	adds	r3, #132	; 0x84
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	01db      	lsls	r3, r3, #7
 8003f7e:	4413      	add	r3, r2
 8003f80:	3384      	adds	r3, #132	; 0x84
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	01db      	lsls	r3, r3, #7
 8003f92:	4413      	add	r3, r2
 8003f94:	3384      	adds	r3, #132	; 0x84
 8003f96:	461a      	mov	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e01b      	b.n	8003fe4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e014      	b.n	8003fe4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d00b      	beq.n	8003fda <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d007      	beq.n	8003fda <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d003      	beq.n	8003fda <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fd6:	2b07      	cmp	r3, #7
 8003fd8:	d102      	bne.n	8003fe0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e001      	b.n	8003fe4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	4413      	add	r3, r2
 8003ff0:	3384      	adds	r3, #132	; 0x84
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	01d2      	lsls	r2, r2, #7
 8003ffe:	440a      	add	r2, r1
 8004000:	3284      	adds	r2, #132	; 0x84
 8004002:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004006:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1acb      	subs	r3, r1, r3
 800401e:	69f9      	ldr	r1, [r7, #28]
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	6809      	ldr	r1, [r1, #0]
 800402a:	4608      	mov	r0, r1
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	01c9      	lsls	r1, r1, #7
 8004030:	4401      	add	r1, r0
 8004032:	3184      	adds	r1, #132	; 0x84
 8004034:	4313      	orrs	r3, r2
 8004036:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	01db      	lsls	r3, r3, #7
 8004042:	4413      	add	r3, r2
 8004044:	3384      	adds	r3, #132	; 0x84
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4611      	mov	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	01d2      	lsls	r2, r2, #7
 8004052:	440a      	add	r2, r1
 8004054:	3284      	adds	r2, #132	; 0x84
 8004056:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	4413      	add	r3, r2
 800406c:	3384      	adds	r3, #132	; 0x84
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	01db      	lsls	r3, r3, #7
 8004080:	4413      	add	r3, r2
 8004082:	3384      	adds	r3, #132	; 0x84
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	4611      	mov	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	01d2      	lsls	r2, r2, #7
 8004090:	440a      	add	r2, r1
 8004092:	3284      	adds	r2, #132	; 0x84
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_PWREx_EnableOverDrive+0x90>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_PWREx_EnableOverDrive+0x90>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_PWREx_EnableOverDrive+0x90>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_PWREx_EnableOverDrive+0x94>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d4:	f7fe fafa 	bl	80026cc <HAL_GetTick>
 80040d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040da:	e009      	b.n	80040f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040dc:	f7fe faf6 	bl	80026cc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ea:	d901      	bls.n	80040f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e01f      	b.n	8004130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_PWREx_EnableOverDrive+0x98>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d1ee      	bne.n	80040dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7fe fae2 	bl	80026cc <HAL_GetTick>
 8004108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800410a:	e009      	b.n	8004120 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800410c:	f7fe fade 	bl	80026cc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800411a:	d901      	bls.n	8004120 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e007      	b.n	8004130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_PWREx_EnableOverDrive+0x98>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412c:	d1ee      	bne.n	800410c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023800 	.word	0x40023800
 800413c:	420e0040 	.word	0x420e0040
 8004140:	40007000 	.word	0x40007000
 8004144:	420e0044 	.word	0x420e0044

08004148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e267      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00c      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b85      	ldr	r3, [pc, #532]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b7e      	ldr	r3, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e242      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a75      	ldr	r2, [pc, #468]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6f      	ldr	r2, [pc, #444]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b6d      	ldr	r3, [pc, #436]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6c      	ldr	r2, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe fa64 	bl	80026cc <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe fa60 	bl	80026cc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e207      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fa50 	bl	80026cc <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe fa4c 	bl	80026cc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1f3      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d063      	beq.n	8004326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d116      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1c7      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4937      	ldr	r1, [pc, #220]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	e03a      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b8:	4b34      	ldr	r3, [pc, #208]	; (800438c <HAL_RCC_OscConfig+0x244>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fe fa05 	bl	80026cc <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fe fa01 	bl	80026cc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1a8      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4925      	ldr	r1, [pc, #148]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	e015      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x244>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe f9e4 	bl	80026cc <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe f9e0 	bl	80026cc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e187      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d036      	beq.n	80043a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCC_OscConfig+0x248>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe f9c4 	bl	80026cc <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7fe f9c0 	bl	80026cc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e167      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
 8004366:	e01b      	b.n	80043a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCC_OscConfig+0x248>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe f9ad 	bl	80026cc <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	e00e      	b.n	8004394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004376:	f7fe f9a9 	bl	80026cc <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d907      	bls.n	8004394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e150      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ea      	bne.n	8004376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8097 	beq.w	80044dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	4b7d      	ldr	r3, [pc, #500]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a7c      	ldr	r2, [pc, #496]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	4b77      	ldr	r3, [pc, #476]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d118      	bne.n	800441c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ea:	4b74      	ldr	r3, [pc, #464]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a73      	ldr	r2, [pc, #460]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f6:	f7fe f969 	bl	80026cc <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fe:	f7fe f965 	bl	80026cc <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e10c      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x2ea>
 8004424:	4b64      	ldr	r3, [pc, #400]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a63      	ldr	r2, [pc, #396]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	e01c      	b.n	800446c <HAL_RCC_OscConfig+0x324>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b05      	cmp	r3, #5
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x30c>
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a5e      	ldr	r2, [pc, #376]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a5b      	ldr	r2, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6713      	str	r3, [r2, #112]	; 0x70
 8004452:	e00b      	b.n	800446c <HAL_RCC_OscConfig+0x324>
 8004454:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
 8004460:	4b55      	ldr	r3, [pc, #340]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a54      	ldr	r2, [pc, #336]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d015      	beq.n	80044a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fe f92a 	bl	80026cc <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fe f926 	bl	80026cc <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0cb      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004492:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ee      	beq.n	800447c <HAL_RCC_OscConfig+0x334>
 800449e:	e014      	b.n	80044ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a0:	f7fe f914 	bl	80026cc <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fe f910 	bl	80026cc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0b5      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ee      	bne.n	80044a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80a1 	beq.w	8004628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d05c      	beq.n	80045ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d141      	bne.n	800457e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fe f8e4 	bl	80026cc <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe f8e0 	bl	80026cc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e087      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	491b      	ldr	r1, [pc, #108]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fe f8b9 	bl	80026cc <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fe f8b5 	bl	80026cc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e05c      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x416>
 800457c:	e054      	b.n	8004628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fe f8a2 	bl	80026cc <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe f89e 	bl	80026cc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e045      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x444>
 80045aa:	e03d      	b.n	8004628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e038      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
 80045c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x4ec>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d028      	beq.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d121      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d11a      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d111      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	3b01      	subs	r3, #1
 800460e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0cc      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b68      	ldr	r3, [pc, #416]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d90c      	bls.n	8004674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b65      	ldr	r3, [pc, #404]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0b8      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a52      	ldr	r2, [pc, #328]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	494d      	ldr	r1, [pc, #308]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b47      	ldr	r3, [pc, #284]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d119      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e06f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e067      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4934      	ldr	r1, [pc, #208]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004728:	f7fd ffd0 	bl	80026cc <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	e00a      	b.n	8004746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004730:	f7fd ffcc 	bl	80026cc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e04f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 020c 	and.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	429a      	cmp	r2, r3
 8004756:	d1eb      	bne.n	8004730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d20c      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e032      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4916      	ldr	r1, [pc, #88]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	490e      	ldr	r1, [pc, #56]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047be:	f000 f821 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	490a      	ldr	r1, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	5ccb      	ldrb	r3, [r1, r3]
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fd ff30 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023c00 	.word	0x40023c00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	08007de4 	.word	0x08007de4
 80047fc:	20000044 	.word	0x20000044
 8004800:	20000048 	.word	0x20000048

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b094      	sub	sp, #80	; 0x50
 800480a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
 8004810:	2300      	movs	r3, #0
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004814:	2300      	movs	r3, #0
 8004816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481c:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d00d      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x40>
 8004828:	2b08      	cmp	r3, #8
 800482a:	f200 80e1 	bhi.w	80049f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x34>
 8004832:	2b04      	cmp	r3, #4
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x3a>
 8004836:	e0db      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800483c:	e0db      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800483e:	4b73      	ldr	r3, [pc, #460]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8004840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004842:	e0d8      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004844:	4b6f      	ldr	r3, [pc, #444]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800484e:	4b6d      	ldr	r3, [pc, #436]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d063      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38
 8004864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
 800486e:	2300      	movs	r3, #0
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	f04f 0000 	mov.w	r0, #0
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	0159      	lsls	r1, r3, #5
 8004884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004888:	0150      	lsls	r0, r2, #5
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4621      	mov	r1, r4
 8004890:	1a51      	subs	r1, r2, r1
 8004892:	6139      	str	r1, [r7, #16]
 8004894:	4629      	mov	r1, r5
 8004896:	eb63 0301 	sbc.w	r3, r3, r1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a8:	4659      	mov	r1, fp
 80048aa:	018b      	lsls	r3, r1, #6
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048b2:	4651      	mov	r1, sl
 80048b4:	018a      	lsls	r2, r1, #6
 80048b6:	4651      	mov	r1, sl
 80048b8:	ebb2 0801 	subs.w	r8, r2, r1
 80048bc:	4659      	mov	r1, fp
 80048be:	eb63 0901 	sbc.w	r9, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb18 0303 	adds.w	r3, r8, r3
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	462b      	mov	r3, r5
 80048e4:	eb49 0303 	adc.w	r3, r9, r3
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048f6:	4629      	mov	r1, r5
 80048f8:	024b      	lsls	r3, r1, #9
 80048fa:	4621      	mov	r1, r4
 80048fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004900:	4621      	mov	r1, r4
 8004902:	024a      	lsls	r2, r1, #9
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490a:	2200      	movs	r2, #0
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
 800490e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004914:	f7fb fc6a 	bl	80001ec <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004920:	e058      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004922:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	2200      	movs	r2, #0
 800492a:	4618      	mov	r0, r3
 800492c:	4611      	mov	r1, r2
 800492e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004932:	623b      	str	r3, [r7, #32]
 8004934:	2300      	movs	r3, #0
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	f04f 0000 	mov.w	r0, #0
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	0159      	lsls	r1, r3, #5
 800494a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494e:	0150      	lsls	r0, r2, #5
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4641      	mov	r1, r8
 8004956:	ebb2 0a01 	subs.w	sl, r2, r1
 800495a:	4649      	mov	r1, r9
 800495c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800496c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004974:	ebb2 040a 	subs.w	r4, r2, sl
 8004978:	eb63 050b 	sbc.w	r5, r3, fp
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	00eb      	lsls	r3, r5, #3
 8004986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498a:	00e2      	lsls	r2, r4, #3
 800498c:	4614      	mov	r4, r2
 800498e:	461d      	mov	r5, r3
 8004990:	4643      	mov	r3, r8
 8004992:	18e3      	adds	r3, r4, r3
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	464b      	mov	r3, r9
 8004998:	eb45 0303 	adc.w	r3, r5, r3
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049aa:	4629      	mov	r1, r5
 80049ac:	028b      	lsls	r3, r1, #10
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b4:	4621      	mov	r1, r4
 80049b6:	028a      	lsls	r2, r1, #10
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049be:	2200      	movs	r2, #0
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	61fa      	str	r2, [r7, #28]
 80049c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c8:	f7fb fc10 	bl	80001ec <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	3301      	adds	r3, #1
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3750      	adds	r7, #80	; 0x50
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	00f42400 	.word	0x00f42400
 8004a0c:	007a1200 	.word	0x007a1200

08004a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000044 	.word	0x20000044

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a2c:	f7ff fff0 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0a9b      	lsrs	r3, r3, #10
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	08007df4 	.word	0x08007df4

08004a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a54:	f7ff ffdc 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0b5b      	lsrs	r3, r3, #13
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	08007df4 	.word	0x08007df4

08004a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d075      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aac:	4b91      	ldr	r3, [pc, #580]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab2:	f7fd fe0b 	bl	80026cc <HAL_GetTick>
 8004ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aba:	f7fd fe07 	bl	80026cc <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e189      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004acc:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	019a      	lsls	r2, r3, #6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	071b      	lsls	r3, r3, #28
 8004af0:	4981      	ldr	r1, [pc, #516]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01f      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b04:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	0f1b      	lsrs	r3, r3, #28
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	071b      	lsls	r3, r3, #28
 8004b24:	4974      	ldr	r1, [pc, #464]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b2c:	4b72      	ldr	r3, [pc, #456]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b32:	f023 021f 	bic.w	r2, r3, #31
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	496e      	ldr	r1, [pc, #440]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	4964      	ldr	r1, [pc, #400]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b72:	f7fd fdab 	bl	80026cc <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b7a:	f7fd fda7 	bl	80026cc <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e129      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b8c:	4b5a      	ldr	r3, [pc, #360]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d079      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bb0:	4b52      	ldr	r3, [pc, #328]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb6:	f7fd fd89 	bl	80026cc <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bbe:	f7fd fd85 	bl	80026cc <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e107      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd0:	4b49      	ldr	r3, [pc, #292]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bdc:	d0ef      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bea:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	0f1b      	lsrs	r3, r3, #28
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	019a      	lsls	r2, r3, #6
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	431a      	orrs	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	493b      	ldr	r1, [pc, #236]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c12:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01e      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	0e1b      	lsrs	r3, r3, #24
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	019a      	lsls	r2, r3, #6
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	071b      	lsls	r3, r3, #28
 8004c58:	4927      	ldr	r1, [pc, #156]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	4922      	ldr	r1, [pc, #136]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c76:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7fd fd26 	bl	80026cc <HAL_GetTick>
 8004c80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c84:	f7fd fd22 	bl	80026cc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0a4      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca2:	d1ef      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 808b 	beq.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fd fcf7 	bl	80026cc <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce0:	e010      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fd fcf3 	bl	80026cc <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d909      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e075      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004cf4:	42470068 	.word	0x42470068
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470070 	.word	0x42470070
 8004d00:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d04:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0e8      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d10:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d028      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d114      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d56:	f7fd fcb9 	bl	80026cc <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fcb5 	bl	80026cc <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e035      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ee      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da2:	4912      	ldr	r1, [pc, #72]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
 8004da8:	e005      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4a0f      	ldr	r2, [pc, #60]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004db4:	6093      	str	r3, [r2, #8]
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc2:	490a      	ldr	r1, [pc, #40]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004ddc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40007000 	.word	0x40007000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	42470e40 	.word	0x42470e40
 8004df4:	424711e0 	.word	0x424711e0

08004df8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e025      	b.n	8004e58 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fd fb7d 	bl	8002520 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f001 f90f 	bl	800605c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	f001 f964 	bl	8006116 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e72:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d101      	bne.n	8004e7e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e021      	b.n	8004ec2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d002      	beq.n	8004e8a <HAL_SDRAM_SendCommand+0x2a>
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b05      	cmp	r3, #5
 8004e88:	d118      	bne.n	8004ebc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f9a4 	bl	80061e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d104      	bne.n	8004eb2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2205      	movs	r2, #5
 8004eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004eb0:	e006      	b.n	8004ec0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004eba:	e001      	b.n	8004ec0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d101      	bne.n	8004ee4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e016      	b.n	8004f12 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10f      	bne.n	8004f10 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 f9af 	bl	8006262 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e07b      	b.n	8005024 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d108      	bne.n	8004f46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3c:	d009      	beq.n	8004f52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	61da      	str	r2, [r3, #28]
 8004f44:	e005      	b.n	8004f52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fd f997 	bl	80022a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	ea42 0103 	orr.w	r1, r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	f003 0104 	and.w	r1, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f003 0210 	and.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005012:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e01a      	b.n	8005074 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd f96a 	bl	8002330 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_SPI_Transmit+0x22>
 800509a:	2302      	movs	r3, #2
 800509c:	e126      	b.n	80052ec <HAL_SPI_Transmit+0x270>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a6:	f7fd fb11 	bl	80026cc <HAL_GetTick>
 80050aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050c0:	e10b      	b.n	80052da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_SPI_Transmit+0x52>
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050d2:	e102      	b.n	80052da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2203      	movs	r2, #3
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511a:	d10f      	bne.n	800513c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800513a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d007      	beq.n	800515a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005162:	d14b      	bne.n	80051fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_SPI_Transmit+0xf6>
 800516c:	8afb      	ldrh	r3, [r7, #22]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d13e      	bne.n	80051f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	881a      	ldrh	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005196:	e02b      	b.n	80051f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d112      	bne.n	80051cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	881a      	ldrh	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	1c9a      	adds	r2, r3, #2
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80051ca:	e011      	b.n	80051f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051cc:	f7fd fa7e 	bl	80026cc <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d803      	bhi.n	80051e4 <HAL_SPI_Transmit+0x168>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d102      	bne.n	80051ea <HAL_SPI_Transmit+0x16e>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051ee:	e074      	b.n	80052da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ce      	bne.n	8005198 <HAL_SPI_Transmit+0x11c>
 80051fa:	e04c      	b.n	8005296 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_SPI_Transmit+0x18e>
 8005204:	8afb      	ldrh	r3, [r7, #22]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d140      	bne.n	800528c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005230:	e02c      	b.n	800528c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d113      	bne.n	8005268 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	86da      	strh	r2, [r3, #54]	; 0x36
 8005266:	e011      	b.n	800528c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005268:	f7fd fa30 	bl	80026cc <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d803      	bhi.n	8005280 <HAL_SPI_Transmit+0x204>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d102      	bne.n	8005286 <HAL_SPI_Transmit+0x20a>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800528a:	e026      	b.n	80052da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1cd      	bne.n	8005232 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fbda 	bl	8005a54 <SPI_EndRxTxTransaction>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e000      	b.n	80052da <HAL_SPI_Transmit+0x25e>
  }

error:
 80052d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005310:	d112      	bne.n	8005338 <HAL_SPI_Receive+0x44>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10e      	bne.n	8005338 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f8f1 	bl	8005516 <HAL_SPI_TransmitReceive>
 8005334:	4603      	mov	r3, r0
 8005336:	e0ea      	b.n	800550e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_SPI_Receive+0x52>
 8005342:	2302      	movs	r3, #2
 8005344:	e0e3      	b.n	800550e <HAL_SPI_Receive+0x21a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800534e:	f7fd f9bd 	bl	80026cc <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d002      	beq.n	8005366 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005360:	2302      	movs	r3, #2
 8005362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005364:	e0ca      	b.n	80054fc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_SPI_Receive+0x7e>
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005376:	e0c1      	b.n	80054fc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2204      	movs	r2, #4
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053be:	d10f      	bne.n	80053e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d007      	beq.n	80053fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d162      	bne.n	80054cc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005406:	e02e      	b.n	8005466 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d115      	bne.n	8005442 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f103 020c 	add.w	r2, r3, #12
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	7812      	ldrb	r2, [r2, #0]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005440:	e011      	b.n	8005466 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005442:	f7fd f943 	bl	80026cc <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d803      	bhi.n	800545a <HAL_SPI_Receive+0x166>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d102      	bne.n	8005460 <HAL_SPI_Receive+0x16c>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005464:	e04a      	b.n	80054fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1cb      	bne.n	8005408 <HAL_SPI_Receive+0x114>
 8005470:	e031      	b.n	80054d6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d113      	bne.n	80054a8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	b292      	uxth	r2, r2
 800548c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a6:	e011      	b.n	80054cc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a8:	f7fd f910 	bl	80026cc <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d803      	bhi.n	80054c0 <HAL_SPI_Receive+0x1cc>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Receive+0x1d2>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054ca:	e017      	b.n	80054fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cd      	bne.n	8005472 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fa54 	bl	8005988 <SPI_EndRxTransaction>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
 80054f8:	e000      	b.n	80054fc <HAL_SPI_Receive+0x208>
  }

error :
 80054fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b08c      	sub	sp, #48	; 0x30
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005524:	2301      	movs	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_SPI_TransmitReceive+0x26>
 8005538:	2302      	movs	r3, #2
 800553a:	e18a      	b.n	8005852 <HAL_SPI_TransmitReceive+0x33c>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005544:	f7fd f8c2 	bl	80026cc <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800555e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005562:	2b01      	cmp	r3, #1
 8005564:	d00f      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x70>
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556c:	d107      	bne.n	800557e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <HAL_SPI_TransmitReceive+0x68>
 8005576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005584:	e15b      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x82>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x82>
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800559e:	e14e      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d003      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2205      	movs	r2, #5
 80055b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	887a      	ldrh	r2, [r7, #2]
 80055c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	887a      	ldrh	r2, [r7, #2]
 80055ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	887a      	ldrh	r2, [r7, #2]
 80055d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d007      	beq.n	8005608 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005610:	d178      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_SPI_TransmitReceive+0x10a>
 800561a:	8b7b      	ldrh	r3, [r7, #26]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d166      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	1c9a      	adds	r2, r3, #2
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005644:	e053      	b.n	80056ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b02      	cmp	r3, #2
 8005652:	d11b      	bne.n	800568c <HAL_SPI_TransmitReceive+0x176>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_SPI_TransmitReceive+0x176>
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d113      	bne.n	800568c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d119      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x1b8>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d014      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	b292      	uxth	r2, r2
 80056b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ca:	2301      	movs	r3, #1
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056ce:	f7fc fffd 	bl	80026cc <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056da:	429a      	cmp	r2, r3
 80056dc:	d807      	bhi.n	80056ee <HAL_SPI_TransmitReceive+0x1d8>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d003      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ec:	e0a7      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1a6      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x130>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1a1      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x130>
 8005702:	e07c      	b.n	80057fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x1fc>
 800570c:	8b7b      	ldrh	r3, [r7, #26]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d16b      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005738:	e057      	b.n	80057ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b02      	cmp	r3, #2
 8005746:	d11c      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x26c>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d017      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x26c>
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d114      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	7812      	ldrb	r2, [r2, #0]
 8005764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d119      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x2ae>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d014      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057c0:	2301      	movs	r3, #1
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057c4:	f7fc ff82 	bl	80026cc <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d803      	bhi.n	80057dc <HAL_SPI_TransmitReceive+0x2c6>
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x2cc>
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057e8:	e029      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1a2      	bne.n	800573a <HAL_SPI_TransmitReceive+0x224>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d19d      	bne.n	800573a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f926 	bl	8005a54 <SPI_EndRxTxTransaction>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d006      	beq.n	800581c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800581a:	e010      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	e000      	b.n	800583e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800583c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800584e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005852:	4618      	mov	r0, r3
 8005854:	3730      	adds	r7, #48	; 0x30
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005868:	b2db      	uxtb	r3, r3
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005888:	f7fc ff20 	bl	80026cc <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	4413      	add	r3, r2
 8005896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005898:	f7fc ff18 	bl	80026cc <HAL_GetTick>
 800589c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800589e:	4b39      	ldr	r3, [pc, #228]	; (8005984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	015b      	lsls	r3, r3, #5
 80058a4:	0d1b      	lsrs	r3, r3, #20
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ae:	e054      	b.n	800595a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d050      	beq.n	800595a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058b8:	f7fc ff08 	bl	80026cc <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d902      	bls.n	80058ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d13d      	bne.n	800594a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e6:	d111      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0x94>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d004      	beq.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d107      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005914:	d10f      	bne.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e017      	b.n	800597a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3b01      	subs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d19b      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000044 	.word	0x20000044

08005988 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800599c:	d111      	bne.n	80059c2 <SPI_EndRxTransaction+0x3a>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d004      	beq.n	80059b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	d107      	bne.n	80059c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d12a      	bne.n	8005a22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d012      	beq.n	80059fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff49 	bl	8005878 <SPI_WaitFlagStateUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02d      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e026      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	2101      	movs	r1, #1
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ff36 	bl	8005878 <SPI_WaitFlagStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e013      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff ff23 	bl	8005878 <SPI_WaitFlagStateUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e000      	b.n	8005a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <SPI_EndRxTxTransaction+0x7c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <SPI_EndRxTxTransaction+0x80>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0d5b      	lsrs	r3, r3, #21
 8005a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d112      	bne.n	8005aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff fef4 	bl	8005878 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e00f      	b.n	8005ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d0f2      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x52>
 8005ac0:	e000      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ac2:	bf00      	nop
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000044 	.word	0x20000044
 8005ad4:	165e9f81 	.word	0x165e9f81

08005ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e03f      	b.n	8005b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fc34 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f829 	bl	8005b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b78:	b0c0      	sub	sp, #256	; 0x100
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	68d9      	ldr	r1, [r3, #12]
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	ea40 0301 	orr.w	r3, r0, r1
 8005b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bcc:	f021 010c 	bic.w	r1, r1, #12
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	6999      	ldr	r1, [r3, #24]
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	ea40 0301 	orr.w	r3, r0, r1
 8005bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b8f      	ldr	r3, [pc, #572]	; (8005e40 <UART_SetConfig+0x2cc>)
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d005      	beq.n	8005c14 <UART_SetConfig+0xa0>
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b8d      	ldr	r3, [pc, #564]	; (8005e44 <UART_SetConfig+0x2d0>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d104      	bne.n	8005c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe ff1c 	bl	8004a50 <HAL_RCC_GetPCLK2Freq>
 8005c18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c1c:	e003      	b.n	8005c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1e:	f7fe ff03 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8005c22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c30:	f040 810c 	bne.w	8005e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c56:	4621      	mov	r1, r4
 8005c58:	eb12 0801 	adds.w	r8, r2, r1
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	eb43 0901 	adc.w	r9, r3, r1
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c76:	4690      	mov	r8, r2
 8005c78:	4699      	mov	r9, r3
 8005c7a:	4623      	mov	r3, r4
 8005c7c:	eb18 0303 	adds.w	r3, r8, r3
 8005c80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c84:	462b      	mov	r3, r5
 8005c86:	eb49 0303 	adc.w	r3, r9, r3
 8005c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	18db      	adds	r3, r3, r3
 8005ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca8:	4613      	mov	r3, r2
 8005caa:	eb42 0303 	adc.w	r3, r2, r3
 8005cae:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cb8:	f7fa fa98 	bl	80001ec <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <UART_SetConfig+0x2d4>)
 8005cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	011c      	lsls	r4, r3, #4
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	1891      	adds	r1, r2, r2
 8005ce2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cec:	4641      	mov	r1, r8
 8005cee:	eb12 0a01 	adds.w	sl, r2, r1
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d0c:	4692      	mov	sl, r2
 8005d0e:	469b      	mov	fp, r3
 8005d10:	4643      	mov	r3, r8
 8005d12:	eb1a 0303 	adds.w	r3, sl, r3
 8005d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	18db      	adds	r3, r3, r3
 8005d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3e:	4613      	mov	r3, r2
 8005d40:	eb42 0303 	adc.w	r3, r2, r3
 8005d44:	647b      	str	r3, [r7, #68]	; 0x44
 8005d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d4e:	f7fa fa4d 	bl	80001ec <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <UART_SetConfig+0x2d4>)
 8005d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2264      	movs	r2, #100	; 0x64
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	1acb      	subs	r3, r1, r3
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <UART_SetConfig+0x2d4>)
 8005d70:	fba3 2302 	umull	r2, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d7c:	441c      	add	r4, r3
 8005d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	1891      	adds	r1, r2, r2
 8005d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d98:	415b      	adcs	r3, r3
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005da0:	4641      	mov	r1, r8
 8005da2:	1851      	adds	r1, r2, r1
 8005da4:	6339      	str	r1, [r7, #48]	; 0x30
 8005da6:	4649      	mov	r1, r9
 8005da8:	414b      	adcs	r3, r1
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005db8:	4659      	mov	r1, fp
 8005dba:	00cb      	lsls	r3, r1, #3
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	00ca      	lsls	r2, r1, #3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4642      	mov	r2, r8
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005df4:	460b      	mov	r3, r1
 8005df6:	18db      	adds	r3, r3, r3
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	eb42 0303 	adc.w	r3, r2, r3
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e0a:	f7fa f9ef 	bl	80001ec <__aeabi_uldivmod>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <UART_SetConfig+0x2d4>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <UART_SetConfig+0x2d4>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f003 0207 	and.w	r2, r3, #7
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4422      	add	r2, r4
 8005e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e3c:	e105      	b.n	800604a <UART_SetConfig+0x4d6>
 8005e3e:	bf00      	nop
 8005e40:	40011000 	.word	0x40011000
 8005e44:	40011400 	.word	0x40011400
 8005e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e5e:	4642      	mov	r2, r8
 8005e60:	464b      	mov	r3, r9
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	6239      	str	r1, [r7, #32]
 8005e66:	415b      	adcs	r3, r3
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e6e:	4641      	mov	r1, r8
 8005e70:	1854      	adds	r4, r2, r1
 8005e72:	4649      	mov	r1, r9
 8005e74:	eb43 0501 	adc.w	r5, r3, r1
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	00eb      	lsls	r3, r5, #3
 8005e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e86:	00e2      	lsls	r2, r4, #3
 8005e88:	4614      	mov	r4, r2
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	4643      	mov	r3, r8
 8005e8e:	18e3      	adds	r3, r4, r3
 8005e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e94:	464b      	mov	r3, r9
 8005e96:	eb45 0303 	adc.w	r3, r5, r3
 8005e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005eba:	4629      	mov	r1, r5
 8005ebc:	008b      	lsls	r3, r1, #2
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	008a      	lsls	r2, r1, #2
 8005ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ecc:	f7fa f98e 	bl	80001ec <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4b60      	ldr	r3, [pc, #384]	; (8006058 <UART_SetConfig+0x4e4>)
 8005ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	011c      	lsls	r4, r3, #4
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	61b9      	str	r1, [r7, #24]
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	61fb      	str	r3, [r7, #28]
 8005efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f00:	4641      	mov	r1, r8
 8005f02:	1851      	adds	r1, r2, r1
 8005f04:	6139      	str	r1, [r7, #16]
 8005f06:	4649      	mov	r1, r9
 8005f08:	414b      	adcs	r3, r1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	00cb      	lsls	r3, r1, #3
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f22:	4651      	mov	r1, sl
 8005f24:	00ca      	lsls	r2, r1, #3
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f34:	464b      	mov	r3, r9
 8005f36:	460a      	mov	r2, r1
 8005f38:	eb42 0303 	adc.w	r3, r2, r3
 8005f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f58:	4649      	mov	r1, r9
 8005f5a:	008b      	lsls	r3, r1, #2
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f62:	4641      	mov	r1, r8
 8005f64:	008a      	lsls	r2, r1, #2
 8005f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f6a:	f7fa f93f 	bl	80001ec <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4b39      	ldr	r3, [pc, #228]	; (8006058 <UART_SetConfig+0x4e4>)
 8005f74:	fba3 1302 	umull	r1, r3, r3, r2
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	2164      	movs	r1, #100	; 0x64
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	3332      	adds	r3, #50	; 0x32
 8005f86:	4a34      	ldr	r2, [pc, #208]	; (8006058 <UART_SetConfig+0x4e4>)
 8005f88:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f92:	441c      	add	r4, r3
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f9c:	677a      	str	r2, [r7, #116]	; 0x74
 8005f9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	1891      	adds	r1, r2, r2
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	1851      	adds	r1, r2, r1
 8005fb6:	6039      	str	r1, [r7, #0]
 8005fb8:	4649      	mov	r1, r9
 8005fba:	414b      	adcs	r3, r1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fca:	4659      	mov	r1, fp
 8005fcc:	00cb      	lsls	r3, r1, #3
 8005fce:	4651      	mov	r1, sl
 8005fd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	00ca      	lsls	r2, r1, #3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4642      	mov	r2, r8
 8005fe0:	189b      	adds	r3, r3, r2
 8005fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ff8:	667a      	str	r2, [r7, #100]	; 0x64
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006006:	4649      	mov	r1, r9
 8006008:	008b      	lsls	r3, r1, #2
 800600a:	4641      	mov	r1, r8
 800600c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006010:	4641      	mov	r1, r8
 8006012:	008a      	lsls	r2, r1, #2
 8006014:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006018:	f7fa f8e8 	bl	80001ec <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <UART_SetConfig+0x4e4>)
 8006022:	fba3 1302 	umull	r1, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2164      	movs	r1, #100	; 0x64
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	3332      	adds	r3, #50	; 0x32
 8006034:	4a08      	ldr	r2, [pc, #32]	; (8006058 <UART_SetConfig+0x4e4>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4422      	add	r2, r4
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006050:	46bd      	mov	sp, r7
 8006052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006056:	bf00      	nop
 8006058:	51eb851f 	.word	0x51eb851f

0800605c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d123      	bne.n	80060b6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	6851      	ldr	r1, [r2, #4]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	6892      	ldr	r2, [r2, #8]
 8006082:	4311      	orrs	r1, r2
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	68d2      	ldr	r2, [r2, #12]
 8006088:	4311      	orrs	r1, r2
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	6912      	ldr	r2, [r2, #16]
 800608e:	4311      	orrs	r1, r2
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	6952      	ldr	r2, [r2, #20]
 8006094:	4311      	orrs	r1, r2
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	6992      	ldr	r2, [r2, #24]
 800609a:	4311      	orrs	r1, r2
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	69d2      	ldr	r2, [r2, #28]
 80060a0:	4311      	orrs	r1, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	6a12      	ldr	r2, [r2, #32]
 80060a6:	4311      	orrs	r1, r2
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ac:	430a      	orrs	r2, r1
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e028      	b.n	8006108 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	69d9      	ldr	r1, [r3, #28]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4319      	orrs	r1, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	430b      	orrs	r3, r1
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	6851      	ldr	r1, [r2, #4]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	6892      	ldr	r2, [r2, #8]
 80060e8:	4311      	orrs	r1, r2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68d2      	ldr	r2, [r2, #12]
 80060ee:	4311      	orrs	r1, r2
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	6912      	ldr	r2, [r2, #16]
 80060f4:	4311      	orrs	r1, r2
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	6952      	ldr	r2, [r2, #20]
 80060fa:	4311      	orrs	r1, r2
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	6992      	ldr	r2, [r2, #24]
 8006100:	430a      	orrs	r2, r1
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d128      	bne.n	800617a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	1e59      	subs	r1, r3, #1
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	3b01      	subs	r3, #1
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	4319      	orrs	r1, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	3b01      	subs	r3, #1
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	4319      	orrs	r1, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	3b01      	subs	r3, #1
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	4319      	orrs	r1, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	3b01      	subs	r3, #1
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	4319      	orrs	r1, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	3b01      	subs	r3, #1
 8006164:	051b      	lsls	r3, r3, #20
 8006166:	4319      	orrs	r1, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	3b01      	subs	r3, #1
 800616e:	061b      	lsls	r3, r3, #24
 8006170:	430b      	orrs	r3, r1
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	e02f      	b.n	80061da <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	68d2      	ldr	r2, [r2, #12]
 800618a:	3a01      	subs	r2, #1
 800618c:	0311      	lsls	r1, r2, #12
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	6952      	ldr	r2, [r2, #20]
 8006192:	3a01      	subs	r2, #1
 8006194:	0512      	lsls	r2, r2, #20
 8006196:	430a      	orrs	r2, r1
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1e59      	subs	r1, r3, #1
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	4319      	orrs	r1, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	4319      	orrs	r1, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	4319      	orrs	r1, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	430b      	orrs	r3, r1
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	0d9b      	lsrs	r3, r3, #22
 80061fe:	059b      	lsls	r3, r3, #22
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	6811      	ldr	r1, [r2, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	6852      	ldr	r2, [r2, #4]
 8006208:	4311      	orrs	r1, r2
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	6892      	ldr	r2, [r2, #8]
 800620e:	3a01      	subs	r2, #1
 8006210:	0152      	lsls	r2, r2, #5
 8006212:	4311      	orrs	r1, r2
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	68d2      	ldr	r2, [r2, #12]
 8006218:	0252      	lsls	r2, r2, #9
 800621a:	430a      	orrs	r2, r1
 800621c:	431a      	orrs	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006222:	f7fc fa53 	bl	80026cc <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006228:	e010      	b.n	800624c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d00c      	beq.n	800624c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <FMC_SDRAM_SendCommand+0x60>
 8006238:	f7fc fa48 	bl	80026cc <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d201      	bcs.n	800624c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b20      	cmp	r3, #32
 8006256:	d0e8      	beq.n	800622a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006274:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	0052      	lsls	r2, r2, #1
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4d0d      	ldr	r5, [pc, #52]	; (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	; (80062cc <__libc_init_array+0x3c>)
 8006296:	1b64      	subs	r4, r4, r5
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2600      	movs	r6, #0
 800629c:	42a6      	cmp	r6, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4d0b      	ldr	r5, [pc, #44]	; (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	; (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 f820 	bl	80062e8 <_init>
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2600      	movs	r6, #0
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b8:	4798      	blx	r3
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c2:	4798      	blx	r3
 80062c4:	3601      	adds	r6, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08007e0c 	.word	0x08007e0c
 80062cc:	08007e0c 	.word	0x08007e0c
 80062d0:	08007e0c 	.word	0x08007e0c
 80062d4:	08007e10 	.word	0x08007e10

080062d8 <memset>:
 80062d8:	4402      	add	r2, r0
 80062da:	4603      	mov	r3, r0
 80062dc:	4293      	cmp	r3, r2
 80062de:	d100      	bne.n	80062e2 <memset+0xa>
 80062e0:	4770      	bx	lr
 80062e2:	f803 1b01 	strb.w	r1, [r3], #1
 80062e6:	e7f9      	b.n	80062dc <memset+0x4>

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr
